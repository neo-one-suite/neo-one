/* @flow */
import type BN from 'bn.js';
import type BigNumber from 'bignumber.js';
import type { Monitor } from '@neo-one/monitor';
import type { Observable } from 'rxjs';
import type { Param as ScriptBuilderParam } from '@neo-one/client-core';

// A NEO address string, e.g. APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR
export type AddressString = string;
// Hex PublicKey, e.g. 02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef
export type PublicKeyString = string;
// Hex PrivateKey
export type PrivateKeyString = string;
// Hex Buffer, e.g. 02028a99826ed
export type BufferString = string;
// NEO Hash160 string, e.g. 0xecc6b20d3ccac1ee9ef109af5a7cdb85706b1df9
export type Hash160String = string;
// NEO Hash256 string, e.g. 0x7f48028c38117ac9e42c8e1f6f06ae027cdbb904eaf1a0bdc30c9d81694e045c
export type Hash256String = string;
// Hex Buffer, e.g. 02028a99826ed
export type SignatureString = string;

export type Peer = {|
  address: string,
  port: number,
|};

export type ContractParameterType =
  | 'Signature'
  | 'Boolean'
  | 'Integer'
  | 'Hash160'
  | 'Hash256'
  | 'ByteArray'
  | 'PublicKey'
  | 'String'
  | 'Array'
  | 'InteropInterface'
  | 'Void';
export type SignatureContractParameter = {|
  type: 'Signature',
  value: BufferString,
|};
export type BooleanContractParameter = {|
  type: 'Boolean',
  value: boolean,
|};
export type IntegerContractParameter = {|
  type: 'Integer',
  value: BN,
|};
export type Hash160ContractParameter = {|
  type: 'Hash160',
  value: Hash160String,
|};
export type Hash256ContractParameter = {|
  type: 'Hash256',
  value: Hash256String,
|};
export type ByteArrayContractParameter = {|
  type: 'ByteArray',
  value: BufferString,
|};
export type PublicKeyContractParameter = {|
  type: 'PublicKey',
  value: PublicKeyString,
|};
export type StringContractParameter = {|
  type: 'String',
  value: string,
|};
export type ArrayContractParameter = {|
  type: 'Array',
  // eslint-disable-next-line
  value: Array<ContractParameter>,
|};
export type InteropInterfaceContractParameter = {|
  type: 'InteropInterface',
|};
export type VoidContractParameter = {|
  type: 'Void',
|};

export type ContractParameter =
  | SignatureContractParameter
  | BooleanContractParameter
  | IntegerContractParameter
  | Hash160ContractParameter
  | Hash256ContractParameter
  | ByteArrayContractParameter
  | PublicKeyContractParameter
  | StringContractParameter
  | ArrayContractParameter
  | InteropInterfaceContractParameter
  | VoidContractParameter;

export type ActionRawBase = {|
  version: number,
  blockIndex: number,
  blockHash: Hash256String,
  transactionIndex: number,
  transactionHash: Hash256String,
  index: number,
  globalIndex: BigNumber,
  scriptHash: Hash160String,
|};
export type NotificationRaw = {|
  ...ActionRawBase,
  type: 'Notification',
  args: Array<ContractParameter>,
|};
export type LogRaw = {|
  ...ActionRawBase,
  type: 'Log',
  message: string,
|};
export type ActionRaw = NotificationRaw | LogRaw;

export type Account = {|
  address: AddressString,
  frozen: boolean,
  votes: Array<PublicKeyString>,
  balances: {|
    [asset: Hash256String]: BigNumber,
  |},
|};

export type AssetType =
  | 'CreditFlag'
  | 'DutyFlag'
  | 'GoverningToken'
  | 'UtilityToken'
  | 'Currency'
  | 'Share'
  | 'Invoice'
  | 'Token';
export type Asset = {|
  hash: Hash256String,
  type: AssetType,
  name: string,
  amount: BigNumber,
  available: BigNumber,
  precision: number,
  owner: PublicKeyString,
  admin: AddressString,
  issuer: AddressString,
  expiration: number,
  frozen: boolean,
|};

export type AttributeUsageBuffer =
  | 'DescriptionUrl'
  | 'Description'
  | 'Remark'
  | 'Remark1'
  | 'Remark2'
  | 'Remark3'
  | 'Remark4'
  | 'Remark5'
  | 'Remark6'
  | 'Remark7'
  | 'Remark8'
  | 'Remark9'
  | 'Remark10'
  | 'Remark11'
  | 'Remark12'
  | 'Remark13'
  | 'Remark14'
  | 'Remark15';
export type AttributeUsagePublicKey = 'ECDH02' | 'ECDH03';
export type AttributeUsageHash160 = 'Script';
export type AttributeUsageHash256 =
  | 'ContractHash'
  | 'Vote'
  | 'Hash1'
  | 'Hash2'
  | 'Hash3'
  | 'Hash4'
  | 'Hash5'
  | 'Hash6'
  | 'Hash7'
  | 'Hash8'
  | 'Hash9'
  | 'Hash10'
  | 'Hash11'
  | 'Hash12'
  | 'Hash13'
  | 'Hash14'
  | 'Hash15';
export type AttributeArg =
  | {|
      usage: AttributeUsageBuffer,
      data: BufferString,
    |}
  | {|
      usage: AttributeUsagePublicKey,
      data: PublicKeyString,
    |}
  | {|
      usage: AttributeUsageHash256,
      data: Hash256String,
    |};
export type Attribute =
| AttributeArg
// Not allowed as an arg because adding arbitrary scripts will cause the
// transaction to be invalid.
| {|
    usage: AttributeUsageHash160,
    data: Hash160String,
  |};

export type Contract = {|
  version: number,
  hash: Hash160String,
  script: BufferString,
  parameters: Array<ContractParameterType>,
  returnType: ContractParameterType,
  name: string,
  codeVersion: string,
  author: string,
  email: string,
  description: string,
  properties: {|
    storage: boolean,
    dynamicInvoke: boolean,
    payable: boolean,
  |},
|};

export type RawInvocationResultSuccess = {|
  state: 'HALT',
  gasConsumed: BigNumber,
  gasCost: BigNumber,
  stack: Array<ContractParameter>,
|};
export type RawInvocationResultError = {|
  state: 'FAULT',
  gasConsumed: BigNumber,
  gasCost: BigNumber,
  stack: Array<ContractParameter>,
  message: string,
|};
export type RawInvocationResult =
  RawInvocationResultSuccess |
  RawInvocationResultError;

export type StorageItem = {|
  hash: Hash160String,
  key: BufferString,
  value: BufferString,
|};

export type Validator = {|
  version: number,
  publicKey: PublicKeyString,
  registered: boolean,
  votes: BigNumber,
|};

export type Input = {|
  txid: Hash256String,
  vout: number,
|};

export type Output = {|
  asset: Hash256String,
  value: BigNumber,
  address: AddressString,
|};

export type UnspentOutput = {|
  asset: Hash256String,
  value: BigNumber,
  address: AddressString,
  txid: Hash256String,
  vout: number,
|};

export type Witness = {|
  invocation: BufferString,
  verification: BufferString,
|};

export type RawInvocationData = {|
  result: RawInvocationResult,
  asset?: Asset,
  contracts: Array<Contract>,
  deletedContractHashes: Array<Hash160String>,
  migratedContractHashes: Array<[Hash160String, Hash160String]>,
  voteUpdates: Array<[AddressString, Array<PublicKeyString>]>,
  actions: Array<ActionRaw>,
|};

export type TransactionBase = {|
  version: number,
  txid: Hash256String,
  size: number,
  attributes: Array<Attribute>,
  vin: Array<Input>,
  vout: Array<Output>,
  scripts: Array<Witness>,
  systemFee: BigNumber,
  networkFee: BigNumber,
|};
export type ConfirmedTransactionBase = {|
  data: {|
    blockHash: Hash256String,
    blockIndex: number,
    index: number,
    globalIndex: BigNumber,
  |},
|};
export type ClaimTransaction = {|
  ...TransactionBase,
  type: 'ClaimTransaction',
  claims: Array<Input>,
|};
export type ConfirmedClaimTransaction = {|
  ...ClaimTransaction,
  ...ConfirmedTransactionBase,
|};
export type ContractTransaction = {|
  ...TransactionBase,
  type: 'ContractTransaction',
|};
export type ConfirmedContractTransaction = {|
  ...ContractTransaction,
  ...ConfirmedTransactionBase,
|};
export type EnrollmentTransaction = {|
  ...TransactionBase,
  type: 'EnrollmentTransaction',
  publicKey: PublicKeyString,
|};
export type ConfirmedEnrollmentTransaction = {|
  ...EnrollmentTransaction,
  ...ConfirmedTransactionBase,
|};
export type IssueTransaction = {|
  ...TransactionBase,
  type: 'IssueTransaction',
|};
export type ConfirmedIssueTransaction = {|
  ...IssueTransaction,
  ...ConfirmedTransactionBase,
|};
export type InvocationTransaction = {|
  ...TransactionBase,
  type: 'InvocationTransaction',
  script: BufferString,
  gas: BigNumber,
|};
export type ConfirmedInvocationTransaction = {|
  ...InvocationTransaction,
  ...ConfirmedTransactionBase,
  invocationData: RawInvocationData,
|};
export type MinerTransaction = {|
  ...TransactionBase,
  type: 'MinerTransaction',
  nonce: number,
|};
export type ConfirmedMinerTransaction = {|
  ...MinerTransaction,
  ...ConfirmedTransactionBase,
|};
export type PublishTransaction = {|
  ...TransactionBase,
  type: 'PublishTransaction',
  contract: Contract,
|};
export type ConfirmedPublishTransaction = {|
  ...PublishTransaction,
  ...ConfirmedTransactionBase,
|};
export type RegisterTransaction = {|
  ...TransactionBase,
  type: 'RegisterTransaction',
  asset: {|
    type: AssetType,
    name: string,
    amount: BigNumber,
    precision: number,
    owner: PublicKeyString,
    admin: AddressString,
  |},
|};
export type ConfirmedRegisterTransaction = {|
  ...RegisterTransaction,
  ...ConfirmedTransactionBase,
|};
export type StateDescriptor = {|
  type: 'Account' | 'Validator',
  key: BufferString,
  field: string,
  value: BufferString,
|};
export type StateTransaction = {|
  ...TransactionBase,
  type: 'StateTransaction',
  descriptors: Array<StateDescriptor>,
|};
export type ConfirmedStateTransaction = {|
  ...StateTransaction,
  ...ConfirmedTransactionBase,
|};
export type Transaction =
  | MinerTransaction
  | IssueTransaction
  | ClaimTransaction
  | EnrollmentTransaction
  | RegisterTransaction
  | ContractTransaction
  | PublishTransaction
  | StateTransaction
  | InvocationTransaction;
export type ConfirmedTransaction =
  | ConfirmedMinerTransaction
  | ConfirmedIssueTransaction
  | ConfirmedClaimTransaction
  | ConfirmedEnrollmentTransaction
  | ConfirmedRegisterTransaction
  | ConfirmedContractTransaction
  | ConfirmedPublishTransaction
  | ConfirmedStateTransaction
  | ConfirmedInvocationTransaction;

export type Header = {|
  version: number,
  hash: Hash256String,
  previousBlockHash: Hash256String,
  merkleRoot: Hash256String,
  time: number,
  index: number,
  nonce: string,
  nextConsensus: AddressString,
  script: Witness,
  size: number,
|};
export type Block = {|
  ...Header,
  transactions: Array<ConfirmedTransaction>,
|};

export type AssetRegister = {|
  assetType: AssetType,
  name: string,
  amount: BigNumber,
  precision: number,
  owner: PublicKeyString,
  admin: AddressString,
  issuer: AddressString,
|};

export type ContractRegister = {|
  script: BufferString,
  parameters: Array<ContractParameterType>,
  returnType: ContractParameterType,
  name: string,
  codeVersion: string,
  author: string,
  email: string,
  description: string,
  properties: {|
    storage: boolean,
    dynamicInvoke: boolean,
    payable: boolean,
  |},
|};

export type Transfer = {|
  amount: BigNumber,
  asset: Hash256String,
  to: AddressString,
|};

export type Param =
  | BigNumber
  | BufferString
  | Hash160String
  | Hash256String
  | AddressString
  | PublicKeyString
  | boolean
  | Array<?Param>;

export type ParamJSON =
  | string
  | BufferString
  | Hash160String
  | Hash256String
  | AddressString
  | PublicKeyString
  | boolean
  | Array<?ParamJSON>;

export type EventParameters = { [name: string]: ?Param };
export type Event = {|
  ...ActionRawBase,
  type: 'Event',
  name: string,
  parameters: EventParameters,
|};

export type Log = {|
  ...ActionRawBase,
  type: 'Log',
  message: string,
|};

export type Action = Event | Log;

export type NetworkType = 'main' | 'test' | string;
export type NetworkSettings = {|
  issueGASFee: BigNumber,
|};

export type UserAccountID = {|
  network: NetworkType,
  address: AddressString,
|};
export type UserAccount = {|
  // UserAccountProvider defined string.
  type: string,
  id: UserAccountID,
  name: string,
  scriptHash: Hash160String,
  publicKey: PublicKeyString,
  configurableName: boolean,
  deletable: boolean,
|};

export type TransactionOptions = {|
  from?: UserAccountID,
  attributes?: Array<AttributeArg>,
  networkFee?: BigNumber,
  monitor?: Monitor,
|};

export type InvokeTransactionOptions = {|
  ...TransactionOptions,
  transfers?: Array<Transfer>,
|};

export type TransactionReceipt = {|
  blockIndex: number,
  blockHash: Hash256String,
  transactionIndex: number,
|};

export type InvokeReceiptInternal = {|
  ...TransactionReceipt,
  result: RawInvocationResult,
  actions: Array<ActionRaw>,
|};

export type InvocationResultSuccess<TValue> = {|
  state: 'HALT',
  gasConsumed: BigNumber,
  gasCost: BigNumber,
  value: TValue,
|};
export type InvocationResultError = {|
  state: 'FAULT',
  gasConsumed: BigNumber,
  gasCost: BigNumber,
  message: string,
|};
export type InvocationResult<TValue> =
  InvocationResultSuccess<TValue> |
  InvocationResultError;

export type InvokeReceipt = {|
  ...TransactionReceipt,
  result: InvocationResult<?Param>,
  events: Array<Event>,
  logs: Array<Log>,
|};

export type PublishReceipt = {|
  ...TransactionReceipt,
  result: InvocationResult<Contract>,
|};

export type RegisterAssetReceipt = {|
  ...TransactionReceipt,
  result: InvocationResult<Asset>,
|};

export type GetOptions = {|
  timeoutMS?: number,
  monitor?: Monitor,
|};

export type Options = {|
  secondsPerBlock: number,
|};

export type TransactionResult<TTransactionReceipt> = {|
  transaction: Transaction,
  confirmed: (options?: GetOptions) => Promise<TTransactionReceipt>,
|};

// Indices are inclusive start, exclusive end.
export type BlockFilter = {|
  indexStart?: number,
  indexStop?: number,
  monitor?: Monitor,
|};

export type UpdateAccountNameOptions = {|
  id: UserAccountID,
  name: string,
  monitor?: Monitor,
|};

export interface DataProvider {
  +network: NetworkType;

  getAccount(address: AddressString, monitor?: Monitor): Promise<Account>;

  getAsset(hash: Hash256String, monitor?: Monitor): Promise<Asset>;

  getBlock(hash: Hash256String, options?: GetOptions): Promise<Block>;
  getBlock(index: number, options?: GetOptions): Promise<Block>;
  iterBlocks(filter?: BlockFilter): AsyncIterable<Block>;

  getBestBlockHash(monitor?: Monitor): Promise<Hash256String>;
  getBlockCount(monitor?: Monitor): Promise<number>;

  getContract(hash: Hash160String, monitor?: Monitor): Promise<Contract>;

  getMemPool(monitor?: Monitor): Promise<Array<Hash256String>>;

  getTransaction(hash: Hash256String, monitor?: Monitor): Promise<Transaction>;

  getValidators(monitor?: Monitor): Promise<Array<Validator>>;

  getConnectedPeers(monitor?: Monitor): Promise<Array<Peer>>;

  getStorage(hash: Hash160String, key: BufferString, monitor?: Monitor): Promise<StorageItem>;
  iterStorage(hash: Hash160String, monitor?: Monitor): AsyncIterable<StorageItem>;
  iterActionsRaw(filterIn?: BlockFilter): AsyncIterable<ActionRaw>;
  call(
    contract: Hash160String,
    method: string,
    params: Array<?ScriptBuilderParam>,
    monitor?: Monitor,
  ): Promise<RawInvocationResult>;
}

export interface DeveloperProvider {
  +network: NetworkType;

  runConsensusNow(monitor?: Monitor): Promise<void>;
  updateSettings(options: Options, monitor?: Monitor): Promise<void>;
  fastForwardOffset(seconds: number, monitor?: Monitor): Promise<void>;
  fastForwardToTime(seconds: number, monitor?: Monitor): Promise<void>;
  reset(monitor?: Monitor): Promise<void>;
}

export interface UserAccountProvider {
  +type: string;
  +currentAccount$: Observable<?UserAccount>;
  +accounts$: Observable<Array<UserAccount>>;
  +networks$: Observable<Array<NetworkType>>;

  getCurrentAccount(): ?UserAccount;
  getAccounts(): Array<UserAccount>;
  getNetworks(): Array<NetworkType>;

  selectAccount(id?: UserAccountID): Promise<void>;
  deleteAccount(id: UserAccountID): Promise<void>;
  updateAccountName(options: UpdateAccountNameOptions): Promise<void>;

  transfer(
    transfers: Array<Transfer>,
    options?: TransactionOptions,
  ): Promise<TransactionResult<TransactionReceipt>>;

  claim(
    options?: TransactionOptions,
  ): Promise<TransactionResult<TransactionReceipt>>;

  publish(
    contract: ContractRegister,
    options?: TransactionOptions,
  ): Promise<TransactionResult<PublishReceipt>>;

  registerAsset(
    asset: AssetRegister,
    options?: TransactionOptions,
  ): Promise<TransactionResult<RegisterAssetReceipt>>;

  issue(
    transfers: Array<Transfer>,
    options?: TransactionOptions,
  ): Promise<TransactionResult<TransactionReceipt>>;

  invoke(
    contract: Hash160String,
    method: string,
    params: Array<?ScriptBuilderParam>,
    paramsZipped: Array<[string, ?Param]>,
    verify: boolean,
    options?: InvokeTransactionOptions,
  ): Promise<TransactionResult<InvokeReceiptInternal>>;
  call(
    contract: Hash160String,
    method: string,
    params: Array<?ScriptBuilderParam>,
    options?: TransactionOptions,
  ): Promise<RawInvocationResult>;

  read(network: NetworkType): DataProvider;
}

export type UserAccountProviders = {
  [type: string]: UserAccountProvider,
};

export type SignatureABIReturn =
  {| type: 'Signature' |};
export type BooleanABIReturn =
  {| type: 'Boolean' |};
export type Hash160ABIReturn =
  {| type: 'Hash160' |};
export type Hash256ABIReturn =
  {| type: 'Hash256' |};
export type ByteArrayABIReturn =
  {| type: 'ByteArray' |};
export type PublicKeyABIReturn =
  {| type: 'PublicKey' |};
export type StringABIReturn =
  {| type: 'String' |};
export type InteropInterfaceABIReturn =
  {| type: 'InteropInterface' |};
export type VoidABIReturn =
  {| type: 'Void' |};
export type IntegerABIReturn =
  {| type: 'Integer', decimals: number |};

export type SignatureABIParameter =
  {| name: string, type: 'Signature' |};
export type BooleanABIParameter =
  {| name: string, type: 'Boolean' |};
export type Hash160ABIParameter =
  {| name: string, type: 'Hash160' |};
export type Hash256ABIParameter =
  {| name: string, type: 'Hash256' |};
export type ByteArrayABIParameter =
  {| name: string, type: 'ByteArray' |};
export type PublicKeyABIParameter =
  {| name: string, type: 'PublicKey' |};
export type StringABIParameter =
  {| name: string, type: 'String' |};
export type InteropInterfaceABIParameter =
  {| name: string, type: 'InteropInterface' |};
export type VoidABIParameter =
  {| name: string, type: 'Void' |};
export type IntegerABIParameter =
  {| name: string, type: 'Integer', decimals: number |};

export type ABIReturn =
  | SignatureABIReturn
  | BooleanABIReturn
  | Hash160ABIReturn
  | Hash256ABIReturn
  | ByteArrayABIReturn
  | PublicKeyABIReturn
  | StringABIReturn
  | {| type: 'Array', value: ABIReturn |}
  | InteropInterfaceABIReturn
  | VoidABIReturn
  | IntegerABIReturn;
export type ABIParameter =
  | SignatureABIParameter
  | BooleanABIParameter
  | Hash160ABIParameter
  | Hash256ABIParameter
  | ByteArrayABIParameter
  | PublicKeyABIParameter
  | StringABIParameter
  | {| name: string, type: 'Array', value: ABIReturn |}
  | InteropInterfaceABIParameter
  | VoidABIParameter
  | IntegerABIParameter;

export type ArrayABI =
  {| type: 'Array', value: ABIReturn |} |
  {| name: string, type: 'Array', value: ABIReturn |};
export type SignatureABI = SignatureABIParameter | SignatureABIReturn;
export type BooleanABI = BooleanABIParameter | BooleanABIReturn;
export type Hash160ABI = Hash160ABIParameter | Hash160ABIReturn;
export type Hash256ABI = Hash256ABIParameter | Hash256ABIReturn;
export type ByteArrayABI = ByteArrayABIParameter | ByteArrayABIReturn;
export type PublicKeyABI = PublicKeyABIParameter | PublicKeyABIReturn;
export type StringABI = StringABIParameter | StringABIReturn;
export type InteropInterfaceABI = InteropInterfaceABIParameter | InteropInterfaceABIReturn;
export type VoidABI = VoidABIParameter | VoidABIReturn;
export type IntegerABI = IntegerABIParameter | IntegerABIReturn;

export type ABIFunction = {|
  name: string,
  constant?: boolean,
  parameters?: Array<ABIParameter>,
  verify?: boolean,
  returnType: ABIReturn,
|};
export type ABIEvent = {|
  name: string,
  parameters: Array<ABIParameter>,
|};
export type ABI = {|
  functions: Array<ABIFunction>,
  events?: Array<ABIEvent>,
|};

export type SmartContractNetworkDefinition = {|
  hash: Hash160String,
|};
export type SmartContractNetworksDefinition = {
  [type: NetworkType]: SmartContractNetworkDefinition,
};
export type SmartContractDefinition = {|
  networks: SmartContractNetworksDefinition,
  abi: ABI,
|};

export type SmartContract = {|
  [key: string]: any,
|};

export type ReadSmartContract = {|
  iterEvents: (filter?: BlockFilter) => AsyncIterable<Event>,
  iterLogs: (filter?: BlockFilter) => AsyncIterable<Log>,
  iterActions: (filter?: BlockFilter) => AsyncIterable<Action>,
  iterStorage: () => AsyncIterable<StorageItem>,
  iterActionsRaw: (filter?: BlockFilter) => AsyncIterable<ActionRaw>,
  convertAction: (action: ActionRaw) => Action,
  [key: string]: any,
|};
