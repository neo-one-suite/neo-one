// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Client __call 1`] = `
Array [
  Array [
    "main",
    "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
    "deploy",
    Array [],
    undefined,
  ],
]
`;

exports[`Client __invoke 1`] = `
Array [
  Array [
    "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
    "deploy",
    Array [],
    Array [],
    true,
    Object {},
    Promise {},
  ],
]
`;

exports[`Client claim 1`] = `Array []`;

exports[`Client constructor automatically selects an account 1`] = `
Array [
  Array [
    Object {
      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
      "network": "main",
    },
  ],
]
`;

exports[`Client constructor does not automatically select an account if one exists at the time of selection 1`] = `Array []`;

exports[`Client constructor throws on no provider 1`] = `"At least one provider is required"`;

exports[`Client deleteUserAccount 1`] = `
Array [
  Array [
    Object {
      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
      "network": "main",
    },
  ],
]
`;

exports[`Client getUserAccount - throws on unknown account 1`] = `"Unknown account ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s"`;

exports[`Client issue - array 1`] = `
Array [
  Array [
    Array [
      Object {
        "amount": "10",
        "asset": "0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b",
        "to": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
      },
    ],
    Object {
      "attributes": Array [],
      "from": Object {
        "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
        "network": "main",
      },
      "monitor": undefined,
      "networkFee": undefined,
      "systemFee": undefined,
    },
  ],
]
`;

exports[`Client issue - simple 1`] = `
Array [
  Array [
    Array [
      Object {
        "amount": "10",
        "asset": "0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b",
        "to": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
      },
    ],
    Object {},
  ],
]
`;

exports[`Client publish 1`] = `
Array [
  Array [
    Object {
      "author": "dicarlo2",
      "codeVersion": "1.0",
      "description": "Hello World",
      "dynamicInvoke": false,
      "email": "alex.dicarlo@neotracker.io",
      "name": "MyContract",
      "parameters": Array [
        "Address",
        "Buffer",
      ],
      "payable": true,
      "returnType": "Buffer",
      "script": "5f8d70",
      "storage": true,
    },
    Object {},
  ],
]
`;

exports[`Client publishAndDeploy 1`] = `
Array [
  Array [
    Object {
      "author": "dicarlo2",
      "codeVersion": "1.0",
      "description": "Hello World",
      "dynamicInvoke": false,
      "email": "alex.dicarlo@neotracker.io",
      "name": "MyContract",
      "parameters": Array [
        "Address",
        "Buffer",
      ],
      "payable": true,
      "returnType": "Buffer",
      "script": "5f8d70",
      "storage": true,
    },
    Object {
      "events": Array [],
      "functions": Array [
        Object {
          "claim": undefined,
          "completeSend": undefined,
          "constant": undefined,
          "name": "deploy",
          "parameters": Array [],
          "receive": undefined,
          "refundAssets": undefined,
          "returnType": Object {
            "forwardedValue": undefined,
            "optional": undefined,
            "type": "Boolean",
          },
          "send": undefined,
          "sendUnsafe": undefined,
        },
      ],
    },
    Array [],
    Object {},
    Promise {},
  ],
]
`;

exports[`Client read - throws on unknown network 1`] = `"Unknown network unknown"`;

exports[`Client read 1`] = `
Array [
  Array [
    "main",
  ],
]
`;

exports[`Client read 2`] = `
ReadClient {
  "dataProvider": Object {},
}
`;

exports[`Client registerAsset 1`] = `
Array [
  Array [
    Object {
      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
      "amount": "100000000",
      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
      "name": "TheToken",
      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
      "precision": 8,
      "type": "Token",
    },
    Object {},
  ],
]
`;

exports[`Client selectUserAccount 1`] = `Array []`;

exports[`Client smartContract 1`] = `
Object {
  "balanceOf": [Function],
  "client": Client {
    "accountState$": Observable {
      "_isScalar": false,
      "operator": RefCountOperator {
        "connectable": Observable {
          "source": Observable {
            "_isScalar": false,
            "operator": DistinctUntilChangedOperator {
              "compare": [Function],
              "keySelector": undefined,
            },
            "source": Observable {
              "_isScalar": false,
              "operator": SwitchMapOperator {
                "project": [Function],
              },
              "source": Observable {
                "_isScalar": false,
                "operator": CombineLatestOperator {
                  "resultSelector": null,
                },
                "source": Observable {
                  "_isScalar": false,
                  "_subscribe": [Function],
                },
              },
            },
          },
          "subjectFactory": [Function],
        },
      },
      "source": Observable {
        "source": Observable {
          "_isScalar": false,
          "operator": DistinctUntilChangedOperator {
            "compare": [Function],
            "keySelector": undefined,
          },
          "source": Observable {
            "_isScalar": false,
            "operator": SwitchMapOperator {
              "project": [Function],
            },
            "source": Observable {
              "_isScalar": false,
              "operator": CombineLatestOperator {
                "resultSelector": null,
              },
              "source": Observable {
                "_isScalar": false,
                "_subscribe": [Function],
              },
            },
          },
        },
        "subjectFactory": [Function],
      },
    },
    "block$": AnonymousSubject {
      "_isScalar": false,
      "closed": false,
      "destination": AnonymousSubject {
        "source": AnonymousSubject {
          "_isScalar": false,
          "closed": false,
          "destination": BehaviorSubject {
            "_isScalar": false,
            "_value": undefined,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "operator": SwitchMapOperator {
            "project": [Function],
          },
          "source": BehaviorSubject {
            "_isScalar": false,
            "_value": undefined,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
          "thrownError": null,
        },
        "subjectFactory": [Function],
      },
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "operator": RefCountOperator {
        "connectable": AnonymousSubject {
          "source": AnonymousSubject {
            "_isScalar": false,
            "closed": false,
            "destination": BehaviorSubject {
              "_isScalar": false,
              "_value": undefined,
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [],
              "thrownError": null,
            },
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "operator": SwitchMapOperator {
              "project": [Function],
            },
            "source": BehaviorSubject {
              "_isScalar": false,
              "_value": undefined,
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [],
              "thrownError": null,
            },
            "thrownError": null,
          },
          "subjectFactory": [Function],
        },
      },
      "source": AnonymousSubject {
        "source": AnonymousSubject {
          "_isScalar": false,
          "closed": false,
          "destination": BehaviorSubject {
            "_isScalar": false,
            "_value": undefined,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "operator": SwitchMapOperator {
            "project": [Function],
          },
          "source": BehaviorSubject {
            "_isScalar": false,
            "_value": undefined,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
          "thrownError": null,
        },
        "subjectFactory": [Function],
      },
      "thrownError": null,
    },
    "currentNetwork$": AnonymousSubject {
      "_isScalar": false,
      "closed": false,
      "destination": BehaviorSubject {
        "_isScalar": false,
        "_value": "main",
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "operator": DistinctUntilChangedOperator {
        "compare": undefined,
        "keySelector": undefined,
      },
      "source": BehaviorSubject {
        "_isScalar": false,
        "_value": "main",
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "thrownError": null,
    },
    "currentNetworkInternal$": BehaviorSubject {
      "_isScalar": false,
      "_value": "main",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    },
    "currentUserAccount$": AnonymousSubject {
      "_isScalar": false,
      "closed": false,
      "destination": BehaviorSubject {
        "_isScalar": false,
        "_value": Object {
          "call": [MockFunction],
          "claim": [MockFunction] {
            "calls": Array [
              Array [
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "currentUserAccount$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Object {
              "id": Object {
                "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                "network": "main",
              },
              "name": "Mock",
              "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
            },
          },
          "deleteUserAccount": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getAccount": [MockFunction],
          "getBlockCount": [MockFunction],
          "getCurrentUserAccount": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              Object {
                "type": "return",
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
            ],
          },
          "getNetworks": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Array [
                  "main",
                ],
              },
            ],
          },
          "getUserAccounts": [MockFunction],
          "invoke": [MockFunction],
          "invokeClaim": [MockFunction],
          "invokeCompleteSend": [MockFunction],
          "invokeRefundAssets": [MockFunction],
          "invokeSend": [MockFunction],
          "issue": [MockFunction],
          "iterActionsRaw": [MockFunction],
          "iterBlocks": [MockFunction],
          "networks$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Array [
              "main",
            ],
          },
          "publish": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "author": "dicarlo2",
                  "codeVersion": "1.0",
                  "description": "Hello World",
                  "dynamicInvoke": false,
                  "email": "alex.dicarlo@neotracker.io",
                  "name": "MyContract",
                  "parameters": Array [
                    "Address",
                    "Buffer",
                  ],
                  "payable": true,
                  "returnType": "Buffer",
                  "script": "5f8d70",
                  "storage": true,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "publishAndDeploy": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "author": "dicarlo2",
                  "codeVersion": "1.0",
                  "description": "Hello World",
                  "dynamicInvoke": false,
                  "email": "alex.dicarlo@neotracker.io",
                  "name": "MyContract",
                  "parameters": Array [
                    "Address",
                    "Buffer",
                  ],
                  "payable": true,
                  "returnType": "Buffer",
                  "script": "5f8d70",
                  "storage": true,
                },
                Object {
                  "events": Array [],
                  "functions": Array [
                    Object {
                      "claim": undefined,
                      "completeSend": undefined,
                      "constant": undefined,
                      "name": "deploy",
                      "parameters": Array [],
                      "receive": undefined,
                      "refundAssets": undefined,
                      "returnType": Object {
                        "forwardedValue": undefined,
                        "optional": undefined,
                        "type": "Boolean",
                      },
                      "send": undefined,
                      "sendUnsafe": undefined,
                    },
                  ],
                },
                Array [],
                Object {},
                Promise {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "read": [MockFunction] {
            "calls": Array [
              Array [
                "main",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Object {},
              },
            ],
          },
          "registerAsset": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "amount": "100000000",
                  "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                  "name": "TheToken",
                  "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  "precision": 8,
                  "type": "Token",
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "selectUserAccount": [MockFunction],
          "transfer": [MockFunction],
          "updateUserAccountName": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "newName",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "userAccounts$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Array [
              Object {
                "id": Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
                "name": "Mock",
                "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
              },
            ],
          },
        },
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          SwitchMapSubscriber {
            "_parent": InnerSubscriber {
              "_parent": CombineLatestSubscriber {
                "_parent": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                  InnerSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "active": 2,
                "closed": false,
                "destination": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "isStopped": true,
                "observables": Array [
                  [Circular],
                  [Circular],
                ],
                "resultSelector": null,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "toRespond": 0,
                "values": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                  Object {
                    "call": [MockFunction],
                    "claim": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "currentUserAccount$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    "deleteUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getAccount": [MockFunction],
                    "getBlockCount": [MockFunction],
                    "getCurrentUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                      ],
                    },
                    "getNetworks": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Array [
                            "main",
                          ],
                        },
                      ],
                    },
                    "getUserAccounts": [MockFunction],
                    "invoke": [MockFunction],
                    "invokeClaim": [MockFunction],
                    "invokeCompleteSend": [MockFunction],
                    "invokeRefundAssets": [MockFunction],
                    "invokeSend": [MockFunction],
                    "issue": [MockFunction],
                    "iterActionsRaw": [MockFunction],
                    "iterBlocks": [MockFunction],
                    "networks$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        "main",
                      ],
                    },
                    "publish": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "publishAndDeploy": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {
                            "events": Array [],
                            "functions": Array [
                              Object {
                                "claim": undefined,
                                "completeSend": undefined,
                                "constant": undefined,
                                "name": "deploy",
                                "parameters": Array [],
                                "receive": undefined,
                                "refundAssets": undefined,
                                "returnType": Object {
                                  "forwardedValue": undefined,
                                  "optional": undefined,
                                  "type": "Boolean",
                                },
                                "send": undefined,
                                "sendUnsafe": undefined,
                              },
                            ],
                          },
                          Array [],
                          Object {},
                          Promise {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "read": [MockFunction] {
                      "calls": Array [
                        Array [
                          "main",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {},
                        },
                      ],
                    },
                    "registerAsset": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "amount": "100000000",
                            "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                            "name": "TheToken",
                            "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                            "precision": 8,
                            "type": "Token",
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "selectUserAccount": [MockFunction],
                    "transfer": [MockFunction],
                    "updateUserAccountName": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "newName",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "userAccounts$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      ],
                    },
                  },
                ],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "index": 1,
              "isStopped": false,
              "outerIndex": 0,
              "outerValue": [Circular],
              "parent": CombineLatestSubscriber {
                "_parent": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                  InnerSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "active": 2,
                "closed": false,
                "destination": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "isStopped": true,
                "observables": Array [
                  [Circular],
                  [Circular],
                ],
                "resultSelector": null,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "toRespond": 0,
                "values": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                  Object {
                    "call": [MockFunction],
                    "claim": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "currentUserAccount$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    "deleteUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getAccount": [MockFunction],
                    "getBlockCount": [MockFunction],
                    "getCurrentUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                      ],
                    },
                    "getNetworks": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Array [
                            "main",
                          ],
                        },
                      ],
                    },
                    "getUserAccounts": [MockFunction],
                    "invoke": [MockFunction],
                    "invokeClaim": [MockFunction],
                    "invokeCompleteSend": [MockFunction],
                    "invokeRefundAssets": [MockFunction],
                    "invokeSend": [MockFunction],
                    "issue": [MockFunction],
                    "iterActionsRaw": [MockFunction],
                    "iterBlocks": [MockFunction],
                    "networks$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        "main",
                      ],
                    },
                    "publish": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "publishAndDeploy": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {
                            "events": Array [],
                            "functions": Array [
                              Object {
                                "claim": undefined,
                                "completeSend": undefined,
                                "constant": undefined,
                                "name": "deploy",
                                "parameters": Array [],
                                "receive": undefined,
                                "refundAssets": undefined,
                                "returnType": Object {
                                  "forwardedValue": undefined,
                                  "optional": undefined,
                                  "type": "Boolean",
                                },
                                "send": undefined,
                                "sendUnsafe": undefined,
                              },
                            ],
                          },
                          Array [],
                          Object {},
                          Promise {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "read": [MockFunction] {
                      "calls": Array [
                        Array [
                          "main",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {},
                        },
                      ],
                    },
                    "registerAsset": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "amount": "100000000",
                            "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                            "name": "TheToken",
                            "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                            "precision": 8,
                            "type": "Token",
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "selectUserAccount": [MockFunction],
                    "transfer": [MockFunction],
                    "updateUserAccountName": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "newName",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "userAccounts$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      ],
                    },
                  },
                ],
              },
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_parentSubscription": null,
            "_parents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parent": [Circular],
                "_parents": null,
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": InnerSubscriber {
              "_parent": CombineLatestSubscriber {
                "_parent": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                  InnerSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "active": 2,
                "closed": false,
                "destination": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "isStopped": true,
                "observables": Array [
                  [Circular],
                  [Circular],
                ],
                "resultSelector": null,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "toRespond": 0,
                "values": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                  Object {
                    "call": [MockFunction],
                    "claim": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "currentUserAccount$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    "deleteUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getAccount": [MockFunction],
                    "getBlockCount": [MockFunction],
                    "getCurrentUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                      ],
                    },
                    "getNetworks": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Array [
                            "main",
                          ],
                        },
                      ],
                    },
                    "getUserAccounts": [MockFunction],
                    "invoke": [MockFunction],
                    "invokeClaim": [MockFunction],
                    "invokeCompleteSend": [MockFunction],
                    "invokeRefundAssets": [MockFunction],
                    "invokeSend": [MockFunction],
                    "issue": [MockFunction],
                    "iterActionsRaw": [MockFunction],
                    "iterBlocks": [MockFunction],
                    "networks$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        "main",
                      ],
                    },
                    "publish": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "publishAndDeploy": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {
                            "events": Array [],
                            "functions": Array [
                              Object {
                                "claim": undefined,
                                "completeSend": undefined,
                                "constant": undefined,
                                "name": "deploy",
                                "parameters": Array [],
                                "receive": undefined,
                                "refundAssets": undefined,
                                "returnType": Object {
                                  "forwardedValue": undefined,
                                  "optional": undefined,
                                  "type": "Boolean",
                                },
                                "send": undefined,
                                "sendUnsafe": undefined,
                              },
                            ],
                          },
                          Array [],
                          Object {},
                          Promise {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "read": [MockFunction] {
                      "calls": Array [
                        Array [
                          "main",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {},
                        },
                      ],
                    },
                    "registerAsset": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "amount": "100000000",
                            "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                            "name": "TheToken",
                            "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                            "precision": 8,
                            "type": "Token",
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "selectUserAccount": [MockFunction],
                    "transfer": [MockFunction],
                    "updateUserAccountName": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "newName",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "userAccounts$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      ],
                    },
                  },
                ],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "index": 1,
              "isStopped": false,
              "outerIndex": 0,
              "outerValue": [Circular],
              "parent": CombineLatestSubscriber {
                "_parent": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                  InnerSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "active": 2,
                "closed": false,
                "destination": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "isStopped": true,
                "observables": Array [
                  [Circular],
                  [Circular],
                ],
                "resultSelector": null,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "toRespond": 0,
                "values": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                  Object {
                    "call": [MockFunction],
                    "claim": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "currentUserAccount$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    "deleteUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getAccount": [MockFunction],
                    "getBlockCount": [MockFunction],
                    "getCurrentUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                      ],
                    },
                    "getNetworks": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Array [
                            "main",
                          ],
                        },
                      ],
                    },
                    "getUserAccounts": [MockFunction],
                    "invoke": [MockFunction],
                    "invokeClaim": [MockFunction],
                    "invokeCompleteSend": [MockFunction],
                    "invokeRefundAssets": [MockFunction],
                    "invokeSend": [MockFunction],
                    "issue": [MockFunction],
                    "iterActionsRaw": [MockFunction],
                    "iterBlocks": [MockFunction],
                    "networks$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        "main",
                      ],
                    },
                    "publish": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "publishAndDeploy": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {
                            "events": Array [],
                            "functions": Array [
                              Object {
                                "claim": undefined,
                                "completeSend": undefined,
                                "constant": undefined,
                                "name": "deploy",
                                "parameters": Array [],
                                "receive": undefined,
                                "refundAssets": undefined,
                                "returnType": Object {
                                  "forwardedValue": undefined,
                                  "optional": undefined,
                                  "type": "Boolean",
                                },
                                "send": undefined,
                                "sendUnsafe": undefined,
                              },
                            ],
                          },
                          Array [],
                          Object {},
                          Promise {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "read": [MockFunction] {
                      "calls": Array [
                        Array [
                          "main",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {},
                        },
                      ],
                    },
                    "registerAsset": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "amount": "100000000",
                            "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                            "name": "TheToken",
                            "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                            "precision": 8,
                            "type": "Token",
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "selectUserAccount": [MockFunction],
                    "transfer": [MockFunction],
                    "updateUserAccountName": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "newName",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "userAccounts$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      ],
                    },
                  },
                ],
              },
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "index": 1,
            "innerSubscription": undefined,
            "isStopped": false,
            "project": [Function],
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          InnerSubscriber {
            "_parent": CombineLatestSubscriber {
              "_parent": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                InnerSubscriber {
                  "_parent": [Circular],
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    SwitchMapSubscriber {
                      "_parent": [Circular],
                      "_parentSubscription": null,
                      "_parents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parent": [Circular],
                          "_parents": null,
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": [Circular],
                      "index": 1,
                      "innerSubscription": undefined,
                      "isStopped": false,
                      "project": [Function],
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "index": 1,
                  "isStopped": false,
                  "outerIndex": 0,
                  "outerValue": [Circular],
                  "parent": [Circular],
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                [Circular],
              ],
              "active": 2,
              "closed": false,
              "destination": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "isStopped": true,
              "observables": Array [
                [Circular],
                [Circular],
              ],
              "resultSelector": null,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "toRespond": 0,
              "values": Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
                Object {
                  "call": [MockFunction],
                  "claim": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "currentUserAccount$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  "deleteUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getAccount": [MockFunction],
                  "getBlockCount": [MockFunction],
                  "getCurrentUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                    ],
                  },
                  "getNetworks": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Array [
                          "main",
                        ],
                      },
                    ],
                  },
                  "getUserAccounts": [MockFunction],
                  "invoke": [MockFunction],
                  "invokeClaim": [MockFunction],
                  "invokeCompleteSend": [MockFunction],
                  "invokeRefundAssets": [MockFunction],
                  "invokeSend": [MockFunction],
                  "issue": [MockFunction],
                  "iterActionsRaw": [MockFunction],
                  "iterBlocks": [MockFunction],
                  "networks$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      "main",
                    ],
                  },
                  "publish": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "publishAndDeploy": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {
                          "events": Array [],
                          "functions": Array [
                            Object {
                              "claim": undefined,
                              "completeSend": undefined,
                              "constant": undefined,
                              "name": "deploy",
                              "parameters": Array [],
                              "receive": undefined,
                              "refundAssets": undefined,
                              "returnType": Object {
                                "forwardedValue": undefined,
                                "optional": undefined,
                                "type": "Boolean",
                              },
                              "send": undefined,
                              "sendUnsafe": undefined,
                            },
                          ],
                        },
                        Array [],
                        Object {},
                        Promise {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "read": [MockFunction] {
                    "calls": Array [
                      Array [
                        "main",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {},
                      },
                    ],
                  },
                  "registerAsset": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "amount": "100000000",
                          "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                          "name": "TheToken",
                          "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          "precision": 8,
                          "type": "Token",
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "selectUserAccount": [MockFunction],
                  "transfer": [MockFunction],
                  "updateUserAccountName": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "newName",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "userAccounts$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    ],
                  },
                },
              ],
            },
            "_parentSubscription": null,
            "_parents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parent": [Circular],
                "_parents": null,
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "index": 1,
            "isStopped": false,
            "outerIndex": 1,
            "outerValue": [Circular],
            "parent": CombineLatestSubscriber {
              "_parent": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                InnerSubscriber {
                  "_parent": [Circular],
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    SwitchMapSubscriber {
                      "_parent": [Circular],
                      "_parentSubscription": null,
                      "_parents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parent": [Circular],
                          "_parents": null,
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": [Circular],
                      "index": 1,
                      "innerSubscription": undefined,
                      "isStopped": false,
                      "project": [Function],
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "index": 1,
                  "isStopped": false,
                  "outerIndex": 0,
                  "outerValue": [Circular],
                  "parent": [Circular],
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                [Circular],
              ],
              "active": 2,
              "closed": false,
              "destination": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "isStopped": true,
              "observables": Array [
                [Circular],
                [Circular],
              ],
              "resultSelector": null,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "toRespond": 0,
              "values": Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
                Object {
                  "call": [MockFunction],
                  "claim": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "currentUserAccount$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  "deleteUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getAccount": [MockFunction],
                  "getBlockCount": [MockFunction],
                  "getCurrentUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                    ],
                  },
                  "getNetworks": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Array [
                          "main",
                        ],
                      },
                    ],
                  },
                  "getUserAccounts": [MockFunction],
                  "invoke": [MockFunction],
                  "invokeClaim": [MockFunction],
                  "invokeCompleteSend": [MockFunction],
                  "invokeRefundAssets": [MockFunction],
                  "invokeSend": [MockFunction],
                  "issue": [MockFunction],
                  "iterActionsRaw": [MockFunction],
                  "iterBlocks": [MockFunction],
                  "networks$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      "main",
                    ],
                  },
                  "publish": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "publishAndDeploy": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {
                          "events": Array [],
                          "functions": Array [
                            Object {
                              "claim": undefined,
                              "completeSend": undefined,
                              "constant": undefined,
                              "name": "deploy",
                              "parameters": Array [],
                              "receive": undefined,
                              "refundAssets": undefined,
                              "returnType": Object {
                                "forwardedValue": undefined,
                                "optional": undefined,
                                "type": "Boolean",
                              },
                              "send": undefined,
                              "sendUnsafe": undefined,
                            },
                          ],
                        },
                        Array [],
                        Object {},
                        Promise {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "read": [MockFunction] {
                    "calls": Array [
                      Array [
                        "main",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {},
                      },
                    ],
                  },
                  "registerAsset": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "amount": "100000000",
                          "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                          "name": "TheToken",
                          "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          "precision": 8,
                          "type": "Token",
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "selectUserAccount": [MockFunction],
                  "transfer": [MockFunction],
                  "updateUserAccountName": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "newName",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "userAccounts$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    ],
                  },
                },
              ],
            },
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "operator": SwitchMapOperator {
        "project": [Function],
      },
      "source": BehaviorSubject {
        "_isScalar": false,
        "_value": Object {
          "call": [MockFunction],
          "claim": [MockFunction] {
            "calls": Array [
              Array [
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "currentUserAccount$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Object {
              "id": Object {
                "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                "network": "main",
              },
              "name": "Mock",
              "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
            },
          },
          "deleteUserAccount": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getAccount": [MockFunction],
          "getBlockCount": [MockFunction],
          "getCurrentUserAccount": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              Object {
                "type": "return",
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
            ],
          },
          "getNetworks": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Array [
                  "main",
                ],
              },
            ],
          },
          "getUserAccounts": [MockFunction],
          "invoke": [MockFunction],
          "invokeClaim": [MockFunction],
          "invokeCompleteSend": [MockFunction],
          "invokeRefundAssets": [MockFunction],
          "invokeSend": [MockFunction],
          "issue": [MockFunction],
          "iterActionsRaw": [MockFunction],
          "iterBlocks": [MockFunction],
          "networks$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Array [
              "main",
            ],
          },
          "publish": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "author": "dicarlo2",
                  "codeVersion": "1.0",
                  "description": "Hello World",
                  "dynamicInvoke": false,
                  "email": "alex.dicarlo@neotracker.io",
                  "name": "MyContract",
                  "parameters": Array [
                    "Address",
                    "Buffer",
                  ],
                  "payable": true,
                  "returnType": "Buffer",
                  "script": "5f8d70",
                  "storage": true,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "publishAndDeploy": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "author": "dicarlo2",
                  "codeVersion": "1.0",
                  "description": "Hello World",
                  "dynamicInvoke": false,
                  "email": "alex.dicarlo@neotracker.io",
                  "name": "MyContract",
                  "parameters": Array [
                    "Address",
                    "Buffer",
                  ],
                  "payable": true,
                  "returnType": "Buffer",
                  "script": "5f8d70",
                  "storage": true,
                },
                Object {
                  "events": Array [],
                  "functions": Array [
                    Object {
                      "claim": undefined,
                      "completeSend": undefined,
                      "constant": undefined,
                      "name": "deploy",
                      "parameters": Array [],
                      "receive": undefined,
                      "refundAssets": undefined,
                      "returnType": Object {
                        "forwardedValue": undefined,
                        "optional": undefined,
                        "type": "Boolean",
                      },
                      "send": undefined,
                      "sendUnsafe": undefined,
                    },
                  ],
                },
                Array [],
                Object {},
                Promise {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "read": [MockFunction] {
            "calls": Array [
              Array [
                "main",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Object {},
              },
            ],
          },
          "registerAsset": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "amount": "100000000",
                  "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                  "name": "TheToken",
                  "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  "precision": 8,
                  "type": "Token",
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "selectUserAccount": [MockFunction],
          "transfer": [MockFunction],
          "updateUserAccountName": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "newName",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "userAccounts$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Array [
              Object {
                "id": Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
                "name": "Mock",
                "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
              },
            ],
          },
        },
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          SwitchMapSubscriber {
            "_parent": InnerSubscriber {
              "_parent": CombineLatestSubscriber {
                "_parent": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                  InnerSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "active": 2,
                "closed": false,
                "destination": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "isStopped": true,
                "observables": Array [
                  [Circular],
                  [Circular],
                ],
                "resultSelector": null,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "toRespond": 0,
                "values": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                  Object {
                    "call": [MockFunction],
                    "claim": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "currentUserAccount$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    "deleteUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getAccount": [MockFunction],
                    "getBlockCount": [MockFunction],
                    "getCurrentUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                      ],
                    },
                    "getNetworks": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Array [
                            "main",
                          ],
                        },
                      ],
                    },
                    "getUserAccounts": [MockFunction],
                    "invoke": [MockFunction],
                    "invokeClaim": [MockFunction],
                    "invokeCompleteSend": [MockFunction],
                    "invokeRefundAssets": [MockFunction],
                    "invokeSend": [MockFunction],
                    "issue": [MockFunction],
                    "iterActionsRaw": [MockFunction],
                    "iterBlocks": [MockFunction],
                    "networks$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        "main",
                      ],
                    },
                    "publish": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "publishAndDeploy": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {
                            "events": Array [],
                            "functions": Array [
                              Object {
                                "claim": undefined,
                                "completeSend": undefined,
                                "constant": undefined,
                                "name": "deploy",
                                "parameters": Array [],
                                "receive": undefined,
                                "refundAssets": undefined,
                                "returnType": Object {
                                  "forwardedValue": undefined,
                                  "optional": undefined,
                                  "type": "Boolean",
                                },
                                "send": undefined,
                                "sendUnsafe": undefined,
                              },
                            ],
                          },
                          Array [],
                          Object {},
                          Promise {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "read": [MockFunction] {
                      "calls": Array [
                        Array [
                          "main",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {},
                        },
                      ],
                    },
                    "registerAsset": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "amount": "100000000",
                            "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                            "name": "TheToken",
                            "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                            "precision": 8,
                            "type": "Token",
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "selectUserAccount": [MockFunction],
                    "transfer": [MockFunction],
                    "updateUserAccountName": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "newName",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "userAccounts$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      ],
                    },
                  },
                ],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "index": 1,
              "isStopped": false,
              "outerIndex": 0,
              "outerValue": [Circular],
              "parent": CombineLatestSubscriber {
                "_parent": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                  InnerSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "active": 2,
                "closed": false,
                "destination": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "isStopped": true,
                "observables": Array [
                  [Circular],
                  [Circular],
                ],
                "resultSelector": null,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "toRespond": 0,
                "values": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                  Object {
                    "call": [MockFunction],
                    "claim": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "currentUserAccount$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    "deleteUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getAccount": [MockFunction],
                    "getBlockCount": [MockFunction],
                    "getCurrentUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                      ],
                    },
                    "getNetworks": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Array [
                            "main",
                          ],
                        },
                      ],
                    },
                    "getUserAccounts": [MockFunction],
                    "invoke": [MockFunction],
                    "invokeClaim": [MockFunction],
                    "invokeCompleteSend": [MockFunction],
                    "invokeRefundAssets": [MockFunction],
                    "invokeSend": [MockFunction],
                    "issue": [MockFunction],
                    "iterActionsRaw": [MockFunction],
                    "iterBlocks": [MockFunction],
                    "networks$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        "main",
                      ],
                    },
                    "publish": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "publishAndDeploy": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {
                            "events": Array [],
                            "functions": Array [
                              Object {
                                "claim": undefined,
                                "completeSend": undefined,
                                "constant": undefined,
                                "name": "deploy",
                                "parameters": Array [],
                                "receive": undefined,
                                "refundAssets": undefined,
                                "returnType": Object {
                                  "forwardedValue": undefined,
                                  "optional": undefined,
                                  "type": "Boolean",
                                },
                                "send": undefined,
                                "sendUnsafe": undefined,
                              },
                            ],
                          },
                          Array [],
                          Object {},
                          Promise {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "read": [MockFunction] {
                      "calls": Array [
                        Array [
                          "main",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {},
                        },
                      ],
                    },
                    "registerAsset": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "amount": "100000000",
                            "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                            "name": "TheToken",
                            "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                            "precision": 8,
                            "type": "Token",
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "selectUserAccount": [MockFunction],
                    "transfer": [MockFunction],
                    "updateUserAccountName": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "newName",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "userAccounts$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      ],
                    },
                  },
                ],
              },
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_parentSubscription": null,
            "_parents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parent": [Circular],
                "_parents": null,
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": InnerSubscriber {
              "_parent": CombineLatestSubscriber {
                "_parent": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                  InnerSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "active": 2,
                "closed": false,
                "destination": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "isStopped": true,
                "observables": Array [
                  [Circular],
                  [Circular],
                ],
                "resultSelector": null,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "toRespond": 0,
                "values": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                  Object {
                    "call": [MockFunction],
                    "claim": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "currentUserAccount$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    "deleteUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getAccount": [MockFunction],
                    "getBlockCount": [MockFunction],
                    "getCurrentUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                      ],
                    },
                    "getNetworks": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Array [
                            "main",
                          ],
                        },
                      ],
                    },
                    "getUserAccounts": [MockFunction],
                    "invoke": [MockFunction],
                    "invokeClaim": [MockFunction],
                    "invokeCompleteSend": [MockFunction],
                    "invokeRefundAssets": [MockFunction],
                    "invokeSend": [MockFunction],
                    "issue": [MockFunction],
                    "iterActionsRaw": [MockFunction],
                    "iterBlocks": [MockFunction],
                    "networks$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        "main",
                      ],
                    },
                    "publish": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "publishAndDeploy": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {
                            "events": Array [],
                            "functions": Array [
                              Object {
                                "claim": undefined,
                                "completeSend": undefined,
                                "constant": undefined,
                                "name": "deploy",
                                "parameters": Array [],
                                "receive": undefined,
                                "refundAssets": undefined,
                                "returnType": Object {
                                  "forwardedValue": undefined,
                                  "optional": undefined,
                                  "type": "Boolean",
                                },
                                "send": undefined,
                                "sendUnsafe": undefined,
                              },
                            ],
                          },
                          Array [],
                          Object {},
                          Promise {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "read": [MockFunction] {
                      "calls": Array [
                        Array [
                          "main",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {},
                        },
                      ],
                    },
                    "registerAsset": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "amount": "100000000",
                            "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                            "name": "TheToken",
                            "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                            "precision": 8,
                            "type": "Token",
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "selectUserAccount": [MockFunction],
                    "transfer": [MockFunction],
                    "updateUserAccountName": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "newName",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "userAccounts$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      ],
                    },
                  },
                ],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "index": 1,
              "isStopped": false,
              "outerIndex": 0,
              "outerValue": [Circular],
              "parent": CombineLatestSubscriber {
                "_parent": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                  InnerSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "active": 2,
                "closed": false,
                "destination": MapSubscriber {
                  "_parent": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "count": 1,
                  "destination": SubjectSubscriber {
                    "_parent": null,
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      [Circular],
                    ],
                    "closed": false,
                    "destination": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "main",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "project": [Function],
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                  "thisArg": [Circular],
                },
                "isStopped": true,
                "observables": Array [
                  [Circular],
                  [Circular],
                ],
                "resultSelector": null,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "toRespond": 0,
                "values": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                  Object {
                    "call": [MockFunction],
                    "claim": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "currentUserAccount$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    "deleteUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getAccount": [MockFunction],
                    "getBlockCount": [MockFunction],
                    "getCurrentUserAccount": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                        Object {
                          "type": "return",
                          "value": Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "Mock",
                            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          },
                        },
                      ],
                    },
                    "getNetworks": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Array [
                            "main",
                          ],
                        },
                      ],
                    },
                    "getUserAccounts": [MockFunction],
                    "invoke": [MockFunction],
                    "invokeClaim": [MockFunction],
                    "invokeCompleteSend": [MockFunction],
                    "invokeRefundAssets": [MockFunction],
                    "invokeSend": [MockFunction],
                    "issue": [MockFunction],
                    "iterActionsRaw": [MockFunction],
                    "iterBlocks": [MockFunction],
                    "networks$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        "main",
                      ],
                    },
                    "publish": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "publishAndDeploy": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "author": "dicarlo2",
                            "codeVersion": "1.0",
                            "description": "Hello World",
                            "dynamicInvoke": false,
                            "email": "alex.dicarlo@neotracker.io",
                            "name": "MyContract",
                            "parameters": Array [
                              "Address",
                              "Buffer",
                            ],
                            "payable": true,
                            "returnType": "Buffer",
                            "script": "5f8d70",
                            "storage": true,
                          },
                          Object {
                            "events": Array [],
                            "functions": Array [
                              Object {
                                "claim": undefined,
                                "completeSend": undefined,
                                "constant": undefined,
                                "name": "deploy",
                                "parameters": Array [],
                                "receive": undefined,
                                "refundAssets": undefined,
                                "returnType": Object {
                                  "forwardedValue": undefined,
                                  "optional": undefined,
                                  "type": "Boolean",
                                },
                                "send": undefined,
                                "sendUnsafe": undefined,
                              },
                            ],
                          },
                          Array [],
                          Object {},
                          Promise {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "read": [MockFunction] {
                      "calls": Array [
                        Array [
                          "main",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Object {},
                        },
                      ],
                    },
                    "registerAsset": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "amount": "100000000",
                            "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                            "name": "TheToken",
                            "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                            "precision": 8,
                            "type": "Token",
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": Promise {},
                        },
                      ],
                    },
                    "selectUserAccount": [MockFunction],
                    "transfer": [MockFunction],
                    "updateUserAccountName": [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "id": Object {
                              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                              "network": "main",
                            },
                            "name": "newName",
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "userAccounts$": Observable {
                      "_isScalar": true,
                      "_subscribe": [Function],
                      "value": Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      ],
                    },
                  },
                ],
              },
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "index": 1,
            "innerSubscription": undefined,
            "isStopped": false,
            "project": [Function],
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          InnerSubscriber {
            "_parent": CombineLatestSubscriber {
              "_parent": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                InnerSubscriber {
                  "_parent": [Circular],
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    SwitchMapSubscriber {
                      "_parent": [Circular],
                      "_parentSubscription": null,
                      "_parents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parent": [Circular],
                          "_parents": null,
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": [Circular],
                      "index": 1,
                      "innerSubscription": undefined,
                      "isStopped": false,
                      "project": [Function],
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "index": 1,
                  "isStopped": false,
                  "outerIndex": 0,
                  "outerValue": [Circular],
                  "parent": [Circular],
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                [Circular],
              ],
              "active": 2,
              "closed": false,
              "destination": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "isStopped": true,
              "observables": Array [
                [Circular],
                [Circular],
              ],
              "resultSelector": null,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "toRespond": 0,
              "values": Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
                Object {
                  "call": [MockFunction],
                  "claim": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "currentUserAccount$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  "deleteUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getAccount": [MockFunction],
                  "getBlockCount": [MockFunction],
                  "getCurrentUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                    ],
                  },
                  "getNetworks": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Array [
                          "main",
                        ],
                      },
                    ],
                  },
                  "getUserAccounts": [MockFunction],
                  "invoke": [MockFunction],
                  "invokeClaim": [MockFunction],
                  "invokeCompleteSend": [MockFunction],
                  "invokeRefundAssets": [MockFunction],
                  "invokeSend": [MockFunction],
                  "issue": [MockFunction],
                  "iterActionsRaw": [MockFunction],
                  "iterBlocks": [MockFunction],
                  "networks$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      "main",
                    ],
                  },
                  "publish": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "publishAndDeploy": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {
                          "events": Array [],
                          "functions": Array [
                            Object {
                              "claim": undefined,
                              "completeSend": undefined,
                              "constant": undefined,
                              "name": "deploy",
                              "parameters": Array [],
                              "receive": undefined,
                              "refundAssets": undefined,
                              "returnType": Object {
                                "forwardedValue": undefined,
                                "optional": undefined,
                                "type": "Boolean",
                              },
                              "send": undefined,
                              "sendUnsafe": undefined,
                            },
                          ],
                        },
                        Array [],
                        Object {},
                        Promise {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "read": [MockFunction] {
                    "calls": Array [
                      Array [
                        "main",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {},
                      },
                    ],
                  },
                  "registerAsset": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "amount": "100000000",
                          "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                          "name": "TheToken",
                          "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          "precision": 8,
                          "type": "Token",
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "selectUserAccount": [MockFunction],
                  "transfer": [MockFunction],
                  "updateUserAccountName": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "newName",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "userAccounts$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    ],
                  },
                },
              ],
            },
            "_parentSubscription": null,
            "_parents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parent": [Circular],
                "_parents": null,
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "index": 1,
            "isStopped": false,
            "outerIndex": 1,
            "outerValue": [Circular],
            "parent": CombineLatestSubscriber {
              "_parent": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                InnerSubscriber {
                  "_parent": [Circular],
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    SwitchMapSubscriber {
                      "_parent": [Circular],
                      "_parentSubscription": null,
                      "_parents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parent": [Circular],
                          "_parents": null,
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": [Circular],
                      "index": 1,
                      "innerSubscription": undefined,
                      "isStopped": false,
                      "project": [Function],
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "index": 1,
                  "isStopped": false,
                  "outerIndex": 0,
                  "outerValue": [Circular],
                  "parent": [Circular],
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                [Circular],
              ],
              "active": 2,
              "closed": false,
              "destination": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "isStopped": true,
              "observables": Array [
                [Circular],
                [Circular],
              ],
              "resultSelector": null,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "toRespond": 0,
              "values": Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
                Object {
                  "call": [MockFunction],
                  "claim": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "currentUserAccount$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  "deleteUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getAccount": [MockFunction],
                  "getBlockCount": [MockFunction],
                  "getCurrentUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                    ],
                  },
                  "getNetworks": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Array [
                          "main",
                        ],
                      },
                    ],
                  },
                  "getUserAccounts": [MockFunction],
                  "invoke": [MockFunction],
                  "invokeClaim": [MockFunction],
                  "invokeCompleteSend": [MockFunction],
                  "invokeRefundAssets": [MockFunction],
                  "invokeSend": [MockFunction],
                  "issue": [MockFunction],
                  "iterActionsRaw": [MockFunction],
                  "iterBlocks": [MockFunction],
                  "networks$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      "main",
                    ],
                  },
                  "publish": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "publishAndDeploy": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {
                          "events": Array [],
                          "functions": Array [
                            Object {
                              "claim": undefined,
                              "completeSend": undefined,
                              "constant": undefined,
                              "name": "deploy",
                              "parameters": Array [],
                              "receive": undefined,
                              "refundAssets": undefined,
                              "returnType": Object {
                                "forwardedValue": undefined,
                                "optional": undefined,
                                "type": "Boolean",
                              },
                              "send": undefined,
                              "sendUnsafe": undefined,
                            },
                          ],
                        },
                        Array [],
                        Object {},
                        Promise {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "read": [MockFunction] {
                    "calls": Array [
                      Array [
                        "main",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {},
                      },
                    ],
                  },
                  "registerAsset": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "amount": "100000000",
                          "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                          "name": "TheToken",
                          "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          "precision": 8,
                          "type": "Token",
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "selectUserAccount": [MockFunction],
                  "transfer": [MockFunction],
                  "updateUserAccountName": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "newName",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "userAccounts$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    ],
                  },
                },
              ],
            },
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
      "thrownError": null,
    },
    "hooks": Object {
      "afterCall": AsyncParallelHook {
        "_args": Array [
          "receipt",
        ],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterConfirmed": AsyncParallelHook {
        "_args": Array [
          "transaction",
          "receipt",
        ],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterRelay": AsyncParallelHook {
        "_args": Array [
          "transaction",
        ],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "beforeConfirmed": AsyncParallelHook {
        "_args": Array [
          "transaction",
        ],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "beforeRelay": AsyncParallelHook {
        "_args": Array [
          "beforeRelay",
        ],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "callError": AsyncParallelHook {
        "_args": Array [
          "error",
        ],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "confirmedError": AsyncParallelHook {
        "_args": Array [
          "transaction",
          "error",
        ],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "relayError": AsyncParallelHook {
        "_args": Array [
          "error",
        ],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
    },
    "networks$": AnonymousSubject {
      "_isScalar": false,
      "closed": false,
      "destination": AnonymousSubject {
        "_isScalar": false,
        "closed": false,
        "destination": BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "local": Object {
              "call": [MockFunction],
              "claim": [MockFunction],
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                },
              },
              "deleteUserAccount": [MockFunction],
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction],
              "getNetworks": [MockFunction],
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction],
              "publishAndDeploy": [MockFunction],
              "read": [MockFunction],
              "registerAsset": [MockFunction],
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction],
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                  },
                ],
              },
            },
            "memory": Object {
              "call": [MockFunction],
              "claim": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              "deleteUserAccount": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                ],
              },
              "getNetworks": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Array [
                      "main",
                    ],
                  },
                ],
              },
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "publishAndDeploy": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {
                      "events": Array [],
                      "functions": Array [
                        Object {
                          "claim": undefined,
                          "completeSend": undefined,
                          "constant": undefined,
                          "name": "deploy",
                          "parameters": Array [],
                          "receive": undefined,
                          "refundAssets": undefined,
                          "returnType": Object {
                            "forwardedValue": undefined,
                            "optional": undefined,
                            "type": "Boolean",
                          },
                          "send": undefined,
                          "sendUnsafe": undefined,
                        },
                      ],
                    },
                    Array [],
                    Object {},
                    Promise {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "read": [MockFunction] {
                "calls": Array [
                  Array [
                    "main",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {},
                  },
                ],
              },
              "registerAsset": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "amount": "100000000",
                      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                      "name": "TheToken",
                      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      "precision": 8,
                      "type": "Token",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "newName",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                ],
              },
            },
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "operator": SwitchMapOperator {
          "project": [Function],
        },
        "source": BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "local": Object {
              "call": [MockFunction],
              "claim": [MockFunction],
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                },
              },
              "deleteUserAccount": [MockFunction],
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction],
              "getNetworks": [MockFunction],
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction],
              "publishAndDeploy": [MockFunction],
              "read": [MockFunction],
              "registerAsset": [MockFunction],
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction],
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                  },
                ],
              },
            },
            "memory": Object {
              "call": [MockFunction],
              "claim": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              "deleteUserAccount": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                ],
              },
              "getNetworks": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Array [
                      "main",
                    ],
                  },
                ],
              },
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "publishAndDeploy": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {
                      "events": Array [],
                      "functions": Array [
                        Object {
                          "claim": undefined,
                          "completeSend": undefined,
                          "constant": undefined,
                          "name": "deploy",
                          "parameters": Array [],
                          "receive": undefined,
                          "refundAssets": undefined,
                          "returnType": Object {
                            "forwardedValue": undefined,
                            "optional": undefined,
                            "type": "Boolean",
                          },
                          "send": undefined,
                          "sendUnsafe": undefined,
                        },
                      ],
                    },
                    Array [],
                    Object {},
                    Promise {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "read": [MockFunction] {
                "calls": Array [
                  Array [
                    "main",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {},
                  },
                ],
              },
              "registerAsset": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "amount": "100000000",
                      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                      "name": "TheToken",
                      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      "precision": 8,
                      "type": "Token",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "newName",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                ],
              },
            },
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "thrownError": null,
      },
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "operator": MapOperator {
        "project": [Function],
        "thisArg": undefined,
      },
      "source": AnonymousSubject {
        "_isScalar": false,
        "closed": false,
        "destination": BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "local": Object {
              "call": [MockFunction],
              "claim": [MockFunction],
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                },
              },
              "deleteUserAccount": [MockFunction],
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction],
              "getNetworks": [MockFunction],
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction],
              "publishAndDeploy": [MockFunction],
              "read": [MockFunction],
              "registerAsset": [MockFunction],
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction],
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                  },
                ],
              },
            },
            "memory": Object {
              "call": [MockFunction],
              "claim": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              "deleteUserAccount": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                ],
              },
              "getNetworks": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Array [
                      "main",
                    ],
                  },
                ],
              },
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "publishAndDeploy": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {
                      "events": Array [],
                      "functions": Array [
                        Object {
                          "claim": undefined,
                          "completeSend": undefined,
                          "constant": undefined,
                          "name": "deploy",
                          "parameters": Array [],
                          "receive": undefined,
                          "refundAssets": undefined,
                          "returnType": Object {
                            "forwardedValue": undefined,
                            "optional": undefined,
                            "type": "Boolean",
                          },
                          "send": undefined,
                          "sendUnsafe": undefined,
                        },
                      ],
                    },
                    Array [],
                    Object {},
                    Promise {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "read": [MockFunction] {
                "calls": Array [
                  Array [
                    "main",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {},
                  },
                ],
              },
              "registerAsset": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "amount": "100000000",
                      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                      "name": "TheToken",
                      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      "precision": 8,
                      "type": "Token",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "newName",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                ],
              },
            },
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "operator": SwitchMapOperator {
          "project": [Function],
        },
        "source": BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "local": Object {
              "call": [MockFunction],
              "claim": [MockFunction],
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                },
              },
              "deleteUserAccount": [MockFunction],
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction],
              "getNetworks": [MockFunction],
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction],
              "publishAndDeploy": [MockFunction],
              "read": [MockFunction],
              "registerAsset": [MockFunction],
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction],
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                  },
                ],
              },
            },
            "memory": Object {
              "call": [MockFunction],
              "claim": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              "deleteUserAccount": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                ],
              },
              "getNetworks": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Array [
                      "main",
                    ],
                  },
                ],
              },
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "publishAndDeploy": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {
                      "events": Array [],
                      "functions": Array [
                        Object {
                          "claim": undefined,
                          "completeSend": undefined,
                          "constant": undefined,
                          "name": "deploy",
                          "parameters": Array [],
                          "receive": undefined,
                          "refundAssets": undefined,
                          "returnType": Object {
                            "forwardedValue": undefined,
                            "optional": undefined,
                            "type": "Boolean",
                          },
                          "send": undefined,
                          "sendUnsafe": undefined,
                        },
                      ],
                    },
                    Array [],
                    Object {},
                    Promise {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "read": [MockFunction] {
                "calls": Array [
                  Array [
                    "main",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {},
                  },
                ],
              },
              "registerAsset": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "amount": "100000000",
                      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                      "name": "TheToken",
                      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      "precision": 8,
                      "type": "Token",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "newName",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                ],
              },
            },
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "thrownError": null,
      },
      "thrownError": null,
    },
    "providers$": BehaviorSubject {
      "_isScalar": false,
      "_value": Object {
        "local": Object {
          "call": [MockFunction],
          "claim": [MockFunction],
          "currentUserAccount$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Object {
              "id": Object {
                "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                "network": "main",
              },
              "name": "Mock",
              "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
            },
          },
          "deleteUserAccount": [MockFunction],
          "getAccount": [MockFunction],
          "getBlockCount": [MockFunction],
          "getCurrentUserAccount": [MockFunction],
          "getNetworks": [MockFunction],
          "getUserAccounts": [MockFunction],
          "invoke": [MockFunction],
          "invokeClaim": [MockFunction],
          "invokeCompleteSend": [MockFunction],
          "invokeRefundAssets": [MockFunction],
          "invokeSend": [MockFunction],
          "issue": [MockFunction],
          "iterActionsRaw": [MockFunction],
          "iterBlocks": [MockFunction],
          "networks$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Array [
              "main",
            ],
          },
          "publish": [MockFunction],
          "publishAndDeploy": [MockFunction],
          "read": [MockFunction],
          "registerAsset": [MockFunction],
          "selectUserAccount": [MockFunction],
          "transfer": [MockFunction],
          "updateUserAccountName": [MockFunction],
          "userAccounts$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Array [
              Object {
                "id": Object {
                  "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                  "network": "main",
                },
                "name": "Mock",
                "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
              },
            ],
          },
        },
        "memory": Object {
          "call": [MockFunction],
          "claim": [MockFunction] {
            "calls": Array [
              Array [
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "currentUserAccount$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Object {
              "id": Object {
                "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                "network": "main",
              },
              "name": "Mock",
              "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
            },
          },
          "deleteUserAccount": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "getAccount": [MockFunction],
          "getBlockCount": [MockFunction],
          "getCurrentUserAccount": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              Object {
                "type": "return",
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
            ],
          },
          "getNetworks": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Array [
                  "main",
                ],
              },
            ],
          },
          "getUserAccounts": [MockFunction],
          "invoke": [MockFunction],
          "invokeClaim": [MockFunction],
          "invokeCompleteSend": [MockFunction],
          "invokeRefundAssets": [MockFunction],
          "invokeSend": [MockFunction],
          "issue": [MockFunction],
          "iterActionsRaw": [MockFunction],
          "iterBlocks": [MockFunction],
          "networks$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Array [
              "main",
            ],
          },
          "publish": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "author": "dicarlo2",
                  "codeVersion": "1.0",
                  "description": "Hello World",
                  "dynamicInvoke": false,
                  "email": "alex.dicarlo@neotracker.io",
                  "name": "MyContract",
                  "parameters": Array [
                    "Address",
                    "Buffer",
                  ],
                  "payable": true,
                  "returnType": "Buffer",
                  "script": "5f8d70",
                  "storage": true,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "publishAndDeploy": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "author": "dicarlo2",
                  "codeVersion": "1.0",
                  "description": "Hello World",
                  "dynamicInvoke": false,
                  "email": "alex.dicarlo@neotracker.io",
                  "name": "MyContract",
                  "parameters": Array [
                    "Address",
                    "Buffer",
                  ],
                  "payable": true,
                  "returnType": "Buffer",
                  "script": "5f8d70",
                  "storage": true,
                },
                Object {
                  "events": Array [],
                  "functions": Array [
                    Object {
                      "claim": undefined,
                      "completeSend": undefined,
                      "constant": undefined,
                      "name": "deploy",
                      "parameters": Array [],
                      "receive": undefined,
                      "refundAssets": undefined,
                      "returnType": Object {
                        "forwardedValue": undefined,
                        "optional": undefined,
                        "type": "Boolean",
                      },
                      "send": undefined,
                      "sendUnsafe": undefined,
                    },
                  ],
                },
                Array [],
                Object {},
                Promise {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "read": [MockFunction] {
            "calls": Array [
              Array [
                "main",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Object {},
              },
            ],
          },
          "registerAsset": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "amount": "100000000",
                  "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                  "name": "TheToken",
                  "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  "precision": 8,
                  "type": "Token",
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "selectUserAccount": [MockFunction],
          "transfer": [MockFunction],
          "updateUserAccountName": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "newName",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "userAccounts$": Observable {
            "_isScalar": true,
            "_subscribe": [Function],
            "value": Array [
              Object {
                "id": Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
                "name": "Mock",
                "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
              },
            ],
          },
        },
      },
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    },
    "reset$": BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    },
    "selectedProvider$": BehaviorSubject {
      "_isScalar": false,
      "_value": Object {
        "call": [MockFunction],
        "claim": [MockFunction] {
          "calls": Array [
            Array [
              Object {},
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "currentUserAccount$": Observable {
          "_isScalar": true,
          "_subscribe": [Function],
          "value": Object {
            "id": Object {
              "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
              "network": "main",
            },
            "name": "Mock",
            "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
          },
        },
        "deleteUserAccount": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                "network": "main",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "getAccount": [MockFunction],
        "getBlockCount": [MockFunction],
        "getCurrentUserAccount": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Object {
                "id": Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
                "name": "Mock",
                "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
              },
            },
            Object {
              "type": "return",
              "value": Object {
                "id": Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
                "name": "Mock",
                "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
              },
            },
          ],
        },
        "getNetworks": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Array [
                "main",
              ],
            },
          ],
        },
        "getUserAccounts": [MockFunction],
        "invoke": [MockFunction],
        "invokeClaim": [MockFunction],
        "invokeCompleteSend": [MockFunction],
        "invokeRefundAssets": [MockFunction],
        "invokeSend": [MockFunction],
        "issue": [MockFunction],
        "iterActionsRaw": [MockFunction],
        "iterBlocks": [MockFunction],
        "networks$": Observable {
          "_isScalar": true,
          "_subscribe": [Function],
          "value": Array [
            "main",
          ],
        },
        "publish": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "author": "dicarlo2",
                "codeVersion": "1.0",
                "description": "Hello World",
                "dynamicInvoke": false,
                "email": "alex.dicarlo@neotracker.io",
                "name": "MyContract",
                "parameters": Array [
                  "Address",
                  "Buffer",
                ],
                "payable": true,
                "returnType": "Buffer",
                "script": "5f8d70",
                "storage": true,
              },
              Object {},
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "publishAndDeploy": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "author": "dicarlo2",
                "codeVersion": "1.0",
                "description": "Hello World",
                "dynamicInvoke": false,
                "email": "alex.dicarlo@neotracker.io",
                "name": "MyContract",
                "parameters": Array [
                  "Address",
                  "Buffer",
                ],
                "payable": true,
                "returnType": "Buffer",
                "script": "5f8d70",
                "storage": true,
              },
              Object {
                "events": Array [],
                "functions": Array [
                  Object {
                    "claim": undefined,
                    "completeSend": undefined,
                    "constant": undefined,
                    "name": "deploy",
                    "parameters": Array [],
                    "receive": undefined,
                    "refundAssets": undefined,
                    "returnType": Object {
                      "forwardedValue": undefined,
                      "optional": undefined,
                      "type": "Boolean",
                    },
                    "send": undefined,
                    "sendUnsafe": undefined,
                  },
                ],
              },
              Array [],
              Object {},
              Promise {},
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "read": [MockFunction] {
          "calls": Array [
            Array [
              "main",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Object {},
            },
          ],
        },
        "registerAsset": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                "amount": "100000000",
                "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                "name": "TheToken",
                "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                "precision": 8,
                "type": "Token",
              },
              Object {},
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "selectUserAccount": [MockFunction],
        "transfer": [MockFunction],
        "updateUserAccountName": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "id": Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
                "name": "newName",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "userAccounts$": Observable {
          "_isScalar": true,
          "_subscribe": [Function],
          "value": Array [
            Object {
              "id": Object {
                "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                "network": "main",
              },
              "name": "Mock",
              "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
            },
          ],
        },
      },
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        SwitchMapSubscriber {
          "_parent": InnerSubscriber {
            "_parent": CombineLatestSubscriber {
              "_parent": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
                InnerSubscriber {
                  "_parent": [Circular],
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parent": [Circular],
                      "_parents": null,
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "index": 1,
                  "isStopped": false,
                  "outerIndex": 1,
                  "outerValue": [Circular],
                  "parent": [Circular],
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "active": 2,
              "closed": false,
              "destination": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "isStopped": true,
              "observables": Array [
                AnonymousSubject {
                  "_isScalar": false,
                  "closed": false,
                  "destination": [Circular],
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "operator": SwitchMapOperator {
                    "project": [Function],
                  },
                  "source": [Circular],
                  "thrownError": null,
                },
                [Circular],
              ],
              "resultSelector": null,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "toRespond": 0,
              "values": Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
                Object {
                  "call": [MockFunction],
                  "claim": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "currentUserAccount$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  "deleteUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getAccount": [MockFunction],
                  "getBlockCount": [MockFunction],
                  "getCurrentUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                    ],
                  },
                  "getNetworks": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Array [
                          "main",
                        ],
                      },
                    ],
                  },
                  "getUserAccounts": [MockFunction],
                  "invoke": [MockFunction],
                  "invokeClaim": [MockFunction],
                  "invokeCompleteSend": [MockFunction],
                  "invokeRefundAssets": [MockFunction],
                  "invokeSend": [MockFunction],
                  "issue": [MockFunction],
                  "iterActionsRaw": [MockFunction],
                  "iterBlocks": [MockFunction],
                  "networks$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      "main",
                    ],
                  },
                  "publish": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "publishAndDeploy": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {
                          "events": Array [],
                          "functions": Array [
                            Object {
                              "claim": undefined,
                              "completeSend": undefined,
                              "constant": undefined,
                              "name": "deploy",
                              "parameters": Array [],
                              "receive": undefined,
                              "refundAssets": undefined,
                              "returnType": Object {
                                "forwardedValue": undefined,
                                "optional": undefined,
                                "type": "Boolean",
                              },
                              "send": undefined,
                              "sendUnsafe": undefined,
                            },
                          ],
                        },
                        Array [],
                        Object {},
                        Promise {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "read": [MockFunction] {
                    "calls": Array [
                      Array [
                        "main",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {},
                      },
                    ],
                  },
                  "registerAsset": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "amount": "100000000",
                          "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                          "name": "TheToken",
                          "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          "precision": 8,
                          "type": "Token",
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "selectUserAccount": [MockFunction],
                  "transfer": [MockFunction],
                  "updateUserAccountName": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "newName",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "userAccounts$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    ],
                  },
                },
              ],
            },
            "_parentSubscription": null,
            "_parents": null,
            "_subscriptions": Array [
              [Circular],
            ],
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "index": 1,
            "isStopped": false,
            "outerIndex": 0,
            "outerValue": AnonymousSubject {
              "_isScalar": false,
              "closed": false,
              "destination": [Circular],
              "hasError": false,
              "isStopped": false,
              "observers": Array [],
              "operator": SwitchMapOperator {
                "project": [Function],
              },
              "source": [Circular],
              "thrownError": null,
            },
            "parent": CombineLatestSubscriber {
              "_parent": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
                InnerSubscriber {
                  "_parent": [Circular],
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parent": [Circular],
                      "_parents": null,
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "index": 1,
                  "isStopped": false,
                  "outerIndex": 1,
                  "outerValue": [Circular],
                  "parent": [Circular],
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "active": 2,
              "closed": false,
              "destination": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "isStopped": true,
              "observables": Array [
                AnonymousSubject {
                  "_isScalar": false,
                  "closed": false,
                  "destination": [Circular],
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "operator": SwitchMapOperator {
                    "project": [Function],
                  },
                  "source": [Circular],
                  "thrownError": null,
                },
                [Circular],
              ],
              "resultSelector": null,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "toRespond": 0,
              "values": Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
                Object {
                  "call": [MockFunction],
                  "claim": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "currentUserAccount$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  "deleteUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getAccount": [MockFunction],
                  "getBlockCount": [MockFunction],
                  "getCurrentUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                    ],
                  },
                  "getNetworks": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Array [
                          "main",
                        ],
                      },
                    ],
                  },
                  "getUserAccounts": [MockFunction],
                  "invoke": [MockFunction],
                  "invokeClaim": [MockFunction],
                  "invokeCompleteSend": [MockFunction],
                  "invokeRefundAssets": [MockFunction],
                  "invokeSend": [MockFunction],
                  "issue": [MockFunction],
                  "iterActionsRaw": [MockFunction],
                  "iterBlocks": [MockFunction],
                  "networks$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      "main",
                    ],
                  },
                  "publish": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "publishAndDeploy": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {
                          "events": Array [],
                          "functions": Array [
                            Object {
                              "claim": undefined,
                              "completeSend": undefined,
                              "constant": undefined,
                              "name": "deploy",
                              "parameters": Array [],
                              "receive": undefined,
                              "refundAssets": undefined,
                              "returnType": Object {
                                "forwardedValue": undefined,
                                "optional": undefined,
                                "type": "Boolean",
                              },
                              "send": undefined,
                              "sendUnsafe": undefined,
                            },
                          ],
                        },
                        Array [],
                        Object {},
                        Promise {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "read": [MockFunction] {
                    "calls": Array [
                      Array [
                        "main",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {},
                      },
                    ],
                  },
                  "registerAsset": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "amount": "100000000",
                          "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                          "name": "TheToken",
                          "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          "precision": 8,
                          "type": "Token",
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "selectUserAccount": [MockFunction],
                  "transfer": [MockFunction],
                  "updateUserAccountName": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "newName",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "userAccounts$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    ],
                  },
                },
              ],
            },
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "_parentSubscription": null,
          "_parents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parent": [Circular],
              "_parents": null,
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": InnerSubscriber {
            "_parent": CombineLatestSubscriber {
              "_parent": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
                InnerSubscriber {
                  "_parent": [Circular],
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parent": [Circular],
                      "_parents": null,
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "index": 1,
                  "isStopped": false,
                  "outerIndex": 1,
                  "outerValue": [Circular],
                  "parent": [Circular],
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "active": 2,
              "closed": false,
              "destination": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "isStopped": true,
              "observables": Array [
                AnonymousSubject {
                  "_isScalar": false,
                  "closed": false,
                  "destination": [Circular],
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "operator": SwitchMapOperator {
                    "project": [Function],
                  },
                  "source": [Circular],
                  "thrownError": null,
                },
                [Circular],
              ],
              "resultSelector": null,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "toRespond": 0,
              "values": Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
                Object {
                  "call": [MockFunction],
                  "claim": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "currentUserAccount$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  "deleteUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getAccount": [MockFunction],
                  "getBlockCount": [MockFunction],
                  "getCurrentUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                    ],
                  },
                  "getNetworks": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Array [
                          "main",
                        ],
                      },
                    ],
                  },
                  "getUserAccounts": [MockFunction],
                  "invoke": [MockFunction],
                  "invokeClaim": [MockFunction],
                  "invokeCompleteSend": [MockFunction],
                  "invokeRefundAssets": [MockFunction],
                  "invokeSend": [MockFunction],
                  "issue": [MockFunction],
                  "iterActionsRaw": [MockFunction],
                  "iterBlocks": [MockFunction],
                  "networks$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      "main",
                    ],
                  },
                  "publish": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "publishAndDeploy": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {
                          "events": Array [],
                          "functions": Array [
                            Object {
                              "claim": undefined,
                              "completeSend": undefined,
                              "constant": undefined,
                              "name": "deploy",
                              "parameters": Array [],
                              "receive": undefined,
                              "refundAssets": undefined,
                              "returnType": Object {
                                "forwardedValue": undefined,
                                "optional": undefined,
                                "type": "Boolean",
                              },
                              "send": undefined,
                              "sendUnsafe": undefined,
                            },
                          ],
                        },
                        Array [],
                        Object {},
                        Promise {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "read": [MockFunction] {
                    "calls": Array [
                      Array [
                        "main",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {},
                      },
                    ],
                  },
                  "registerAsset": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "amount": "100000000",
                          "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                          "name": "TheToken",
                          "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          "precision": 8,
                          "type": "Token",
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "selectUserAccount": [MockFunction],
                  "transfer": [MockFunction],
                  "updateUserAccountName": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "newName",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "userAccounts$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    ],
                  },
                },
              ],
            },
            "_parentSubscription": null,
            "_parents": null,
            "_subscriptions": Array [
              [Circular],
            ],
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "index": 1,
            "isStopped": false,
            "outerIndex": 0,
            "outerValue": AnonymousSubject {
              "_isScalar": false,
              "closed": false,
              "destination": [Circular],
              "hasError": false,
              "isStopped": false,
              "observers": Array [],
              "operator": SwitchMapOperator {
                "project": [Function],
              },
              "source": [Circular],
              "thrownError": null,
            },
            "parent": CombineLatestSubscriber {
              "_parent": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
                InnerSubscriber {
                  "_parent": [Circular],
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parent": [Circular],
                      "_parents": null,
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "index": 1,
                  "isStopped": false,
                  "outerIndex": 1,
                  "outerValue": [Circular],
                  "parent": [Circular],
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "active": 2,
              "closed": false,
              "destination": MapSubscriber {
                "_parent": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "count": 1,
                "destination": SubjectSubscriber {
                  "_parent": null,
                  "_parentSubscription": null,
                  "_parents": null,
                  "_subscriptions": Array [
                    [Circular],
                  ],
                  "closed": false,
                  "destination": BehaviorSubject {
                    "_isScalar": false,
                    "_value": "main",
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "project": [Function],
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
                "thisArg": [Circular],
              },
              "isStopped": true,
              "observables": Array [
                AnonymousSubject {
                  "_isScalar": false,
                  "closed": false,
                  "destination": [Circular],
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "operator": SwitchMapOperator {
                    "project": [Function],
                  },
                  "source": [Circular],
                  "thrownError": null,
                },
                [Circular],
              ],
              "resultSelector": null,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "toRespond": 0,
              "values": Array [
                Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
                Object {
                  "call": [MockFunction],
                  "claim": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "currentUserAccount$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  "deleteUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getAccount": [MockFunction],
                  "getBlockCount": [MockFunction],
                  "getCurrentUserAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                      Object {
                        "type": "return",
                        "value": Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "Mock",
                          "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        },
                      },
                    ],
                  },
                  "getNetworks": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Array [
                          "main",
                        ],
                      },
                    ],
                  },
                  "getUserAccounts": [MockFunction],
                  "invoke": [MockFunction],
                  "invokeClaim": [MockFunction],
                  "invokeCompleteSend": [MockFunction],
                  "invokeRefundAssets": [MockFunction],
                  "invokeSend": [MockFunction],
                  "issue": [MockFunction],
                  "iterActionsRaw": [MockFunction],
                  "iterBlocks": [MockFunction],
                  "networks$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      "main",
                    ],
                  },
                  "publish": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "publishAndDeploy": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "author": "dicarlo2",
                          "codeVersion": "1.0",
                          "description": "Hello World",
                          "dynamicInvoke": false,
                          "email": "alex.dicarlo@neotracker.io",
                          "name": "MyContract",
                          "parameters": Array [
                            "Address",
                            "Buffer",
                          ],
                          "payable": true,
                          "returnType": "Buffer",
                          "script": "5f8d70",
                          "storage": true,
                        },
                        Object {
                          "events": Array [],
                          "functions": Array [
                            Object {
                              "claim": undefined,
                              "completeSend": undefined,
                              "constant": undefined,
                              "name": "deploy",
                              "parameters": Array [],
                              "receive": undefined,
                              "refundAssets": undefined,
                              "returnType": Object {
                                "forwardedValue": undefined,
                                "optional": undefined,
                                "type": "Boolean",
                              },
                              "send": undefined,
                              "sendUnsafe": undefined,
                            },
                          ],
                        },
                        Array [],
                        Object {},
                        Promise {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "read": [MockFunction] {
                    "calls": Array [
                      Array [
                        "main",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Object {},
                      },
                    ],
                  },
                  "registerAsset": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "amount": "100000000",
                          "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                          "name": "TheToken",
                          "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                          "precision": 8,
                          "type": "Token",
                        },
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Promise {},
                      },
                    ],
                  },
                  "selectUserAccount": [MockFunction],
                  "transfer": [MockFunction],
                  "updateUserAccountName": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "id": Object {
                            "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                            "network": "main",
                          },
                          "name": "newName",
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "userAccounts$": Observable {
                    "_isScalar": true,
                    "_subscribe": [Function],
                    "value": Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    ],
                  },
                },
              ],
            },
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "index": 1,
          "innerSubscription": undefined,
          "isStopped": false,
          "project": [Function],
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        InnerSubscriber {
          "_parent": CombineLatestSubscriber {
            "_parent": MapSubscriber {
              "_parent": SubjectSubscriber {
                "_parent": null,
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "destination": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "main",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "count": 1,
              "destination": SubjectSubscriber {
                "_parent": null,
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "destination": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "main",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "project": [Function],
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "thisArg": [Circular],
            },
            "_parentSubscription": null,
            "_parents": null,
            "_subscriptions": Array [
              InnerSubscriber {
                "_parent": [Circular],
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  SwitchMapSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": [Circular],
                    "index": 1,
                    "innerSubscription": undefined,
                    "isStopped": false,
                    "project": [Function],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": AnonymousSubject {
                  "_isScalar": false,
                  "closed": false,
                  "destination": [Circular],
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "operator": SwitchMapOperator {
                    "project": [Function],
                  },
                  "source": [Circular],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": MapSubscriber {
              "_parent": SubjectSubscriber {
                "_parent": null,
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "destination": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "main",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "count": 1,
              "destination": SubjectSubscriber {
                "_parent": null,
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "destination": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "main",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "project": [Function],
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "thisArg": [Circular],
            },
            "isStopped": true,
            "observables": Array [
              AnonymousSubject {
                "_isScalar": false,
                "closed": false,
                "destination": [Circular],
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "operator": SwitchMapOperator {
                  "project": [Function],
                },
                "source": [Circular],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              Object {
                "id": Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
                "name": "Mock",
                "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
              },
              Object {
                "call": [MockFunction],
                "claim": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Promise {},
                    },
                  ],
                },
                "currentUserAccount$": Observable {
                  "_isScalar": true,
                  "_subscribe": [Function],
                  "value": Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                },
                "deleteUserAccount": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "getAccount": [MockFunction],
                "getBlockCount": [MockFunction],
                "getCurrentUserAccount": [MockFunction] {
                  "calls": Array [
                    Array [],
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    Object {
                      "type": "return",
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                  ],
                },
                "getNetworks": [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Array [
                        "main",
                      ],
                    },
                  ],
                },
                "getUserAccounts": [MockFunction],
                "invoke": [MockFunction],
                "invokeClaim": [MockFunction],
                "invokeCompleteSend": [MockFunction],
                "invokeRefundAssets": [MockFunction],
                "invokeSend": [MockFunction],
                "issue": [MockFunction],
                "iterActionsRaw": [MockFunction],
                "iterBlocks": [MockFunction],
                "networks$": Observable {
                  "_isScalar": true,
                  "_subscribe": [Function],
                  "value": Array [
                    "main",
                  ],
                },
                "publish": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "author": "dicarlo2",
                        "codeVersion": "1.0",
                        "description": "Hello World",
                        "dynamicInvoke": false,
                        "email": "alex.dicarlo@neotracker.io",
                        "name": "MyContract",
                        "parameters": Array [
                          "Address",
                          "Buffer",
                        ],
                        "payable": true,
                        "returnType": "Buffer",
                        "script": "5f8d70",
                        "storage": true,
                      },
                      Object {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Promise {},
                    },
                  ],
                },
                "publishAndDeploy": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "author": "dicarlo2",
                        "codeVersion": "1.0",
                        "description": "Hello World",
                        "dynamicInvoke": false,
                        "email": "alex.dicarlo@neotracker.io",
                        "name": "MyContract",
                        "parameters": Array [
                          "Address",
                          "Buffer",
                        ],
                        "payable": true,
                        "returnType": "Buffer",
                        "script": "5f8d70",
                        "storage": true,
                      },
                      Object {
                        "events": Array [],
                        "functions": Array [
                          Object {
                            "claim": undefined,
                            "completeSend": undefined,
                            "constant": undefined,
                            "name": "deploy",
                            "parameters": Array [],
                            "receive": undefined,
                            "refundAssets": undefined,
                            "returnType": Object {
                              "forwardedValue": undefined,
                              "optional": undefined,
                              "type": "Boolean",
                            },
                            "send": undefined,
                            "sendUnsafe": undefined,
                          },
                        ],
                      },
                      Array [],
                      Object {},
                      Promise {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Promise {},
                    },
                  ],
                },
                "read": [MockFunction] {
                  "calls": Array [
                    Array [
                      "main",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Object {},
                    },
                  ],
                },
                "registerAsset": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "amount": "100000000",
                        "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                        "name": "TheToken",
                        "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        "precision": 8,
                        "type": "Token",
                      },
                      Object {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Promise {},
                    },
                  ],
                },
                "selectUserAccount": [MockFunction],
                "transfer": [MockFunction],
                "updateUserAccountName": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "newName",
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "userAccounts$": Observable {
                  "_isScalar": true,
                  "_subscribe": [Function],
                  "value": Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  ],
                },
              },
            ],
          },
          "_parentSubscription": null,
          "_parents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parent": [Circular],
              "_parents": null,
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 1,
          "outerValue": [Circular],
          "parent": CombineLatestSubscriber {
            "_parent": MapSubscriber {
              "_parent": SubjectSubscriber {
                "_parent": null,
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "destination": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "main",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "count": 1,
              "destination": SubjectSubscriber {
                "_parent": null,
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "destination": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "main",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "project": [Function],
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "thisArg": [Circular],
            },
            "_parentSubscription": null,
            "_parents": null,
            "_subscriptions": Array [
              InnerSubscriber {
                "_parent": [Circular],
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  SwitchMapSubscriber {
                    "_parent": [Circular],
                    "_parentSubscription": null,
                    "_parents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parent": [Circular],
                        "_parents": null,
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": [Circular],
                    "index": 1,
                    "innerSubscription": undefined,
                    "isStopped": false,
                    "project": [Function],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": AnonymousSubject {
                  "_isScalar": false,
                  "closed": false,
                  "destination": [Circular],
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "operator": SwitchMapOperator {
                    "project": [Function],
                  },
                  "source": [Circular],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": MapSubscriber {
              "_parent": SubjectSubscriber {
                "_parent": null,
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "destination": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "main",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "_parentSubscription": null,
              "_parents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "count": 1,
              "destination": SubjectSubscriber {
                "_parent": null,
                "_parentSubscription": null,
                "_parents": null,
                "_subscriptions": Array [
                  [Circular],
                ],
                "closed": false,
                "destination": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "main",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "project": [Function],
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
              "thisArg": [Circular],
            },
            "isStopped": true,
            "observables": Array [
              AnonymousSubject {
                "_isScalar": false,
                "closed": false,
                "destination": [Circular],
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "operator": SwitchMapOperator {
                  "project": [Function],
                },
                "source": [Circular],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              Object {
                "id": Object {
                  "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                  "network": "main",
                },
                "name": "Mock",
                "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
              },
              Object {
                "call": [MockFunction],
                "claim": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Promise {},
                    },
                  ],
                },
                "currentUserAccount$": Observable {
                  "_isScalar": true,
                  "_subscribe": [Function],
                  "value": Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                },
                "deleteUserAccount": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "getAccount": [MockFunction],
                "getBlockCount": [MockFunction],
                "getCurrentUserAccount": [MockFunction] {
                  "calls": Array [
                    Array [],
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                    Object {
                      "type": "return",
                      "value": Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "Mock",
                        "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      },
                    },
                  ],
                },
                "getNetworks": [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Array [
                        "main",
                      ],
                    },
                  ],
                },
                "getUserAccounts": [MockFunction],
                "invoke": [MockFunction],
                "invokeClaim": [MockFunction],
                "invokeCompleteSend": [MockFunction],
                "invokeRefundAssets": [MockFunction],
                "invokeSend": [MockFunction],
                "issue": [MockFunction],
                "iterActionsRaw": [MockFunction],
                "iterBlocks": [MockFunction],
                "networks$": Observable {
                  "_isScalar": true,
                  "_subscribe": [Function],
                  "value": Array [
                    "main",
                  ],
                },
                "publish": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "author": "dicarlo2",
                        "codeVersion": "1.0",
                        "description": "Hello World",
                        "dynamicInvoke": false,
                        "email": "alex.dicarlo@neotracker.io",
                        "name": "MyContract",
                        "parameters": Array [
                          "Address",
                          "Buffer",
                        ],
                        "payable": true,
                        "returnType": "Buffer",
                        "script": "5f8d70",
                        "storage": true,
                      },
                      Object {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Promise {},
                    },
                  ],
                },
                "publishAndDeploy": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "author": "dicarlo2",
                        "codeVersion": "1.0",
                        "description": "Hello World",
                        "dynamicInvoke": false,
                        "email": "alex.dicarlo@neotracker.io",
                        "name": "MyContract",
                        "parameters": Array [
                          "Address",
                          "Buffer",
                        ],
                        "payable": true,
                        "returnType": "Buffer",
                        "script": "5f8d70",
                        "storage": true,
                      },
                      Object {
                        "events": Array [],
                        "functions": Array [
                          Object {
                            "claim": undefined,
                            "completeSend": undefined,
                            "constant": undefined,
                            "name": "deploy",
                            "parameters": Array [],
                            "receive": undefined,
                            "refundAssets": undefined,
                            "returnType": Object {
                              "forwardedValue": undefined,
                              "optional": undefined,
                              "type": "Boolean",
                            },
                            "send": undefined,
                            "sendUnsafe": undefined,
                          },
                        ],
                      },
                      Array [],
                      Object {},
                      Promise {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Promise {},
                    },
                  ],
                },
                "read": [MockFunction] {
                  "calls": Array [
                    Array [
                      "main",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Object {},
                    },
                  ],
                },
                "registerAsset": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "amount": "100000000",
                        "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                        "name": "TheToken",
                        "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                        "precision": 8,
                        "type": "Token",
                      },
                      Object {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Promise {},
                    },
                  ],
                },
                "selectUserAccount": [MockFunction],
                "transfer": [MockFunction],
                "updateUserAccountName": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "id": Object {
                          "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                          "network": "main",
                        },
                        "name": "newName",
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "userAccounts$": Observable {
                  "_isScalar": true,
                  "_subscribe": [Function],
                  "value": Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  ],
                },
              },
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    },
    "userAccounts$": AnonymousSubject {
      "_isScalar": false,
      "closed": false,
      "destination": AnonymousSubject {
        "_isScalar": false,
        "closed": false,
        "destination": BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "local": Object {
              "call": [MockFunction],
              "claim": [MockFunction],
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                },
              },
              "deleteUserAccount": [MockFunction],
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction],
              "getNetworks": [MockFunction],
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction],
              "publishAndDeploy": [MockFunction],
              "read": [MockFunction],
              "registerAsset": [MockFunction],
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction],
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                  },
                ],
              },
            },
            "memory": Object {
              "call": [MockFunction],
              "claim": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              "deleteUserAccount": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                ],
              },
              "getNetworks": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Array [
                      "main",
                    ],
                  },
                ],
              },
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "publishAndDeploy": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {
                      "events": Array [],
                      "functions": Array [
                        Object {
                          "claim": undefined,
                          "completeSend": undefined,
                          "constant": undefined,
                          "name": "deploy",
                          "parameters": Array [],
                          "receive": undefined,
                          "refundAssets": undefined,
                          "returnType": Object {
                            "forwardedValue": undefined,
                            "optional": undefined,
                            "type": "Boolean",
                          },
                          "send": undefined,
                          "sendUnsafe": undefined,
                        },
                      ],
                    },
                    Array [],
                    Object {},
                    Promise {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "read": [MockFunction] {
                "calls": Array [
                  Array [
                    "main",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {},
                  },
                ],
              },
              "registerAsset": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "amount": "100000000",
                      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                      "name": "TheToken",
                      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      "precision": 8,
                      "type": "Token",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "newName",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                ],
              },
            },
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "operator": SwitchMapOperator {
          "project": [Function],
        },
        "source": BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "local": Object {
              "call": [MockFunction],
              "claim": [MockFunction],
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                },
              },
              "deleteUserAccount": [MockFunction],
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction],
              "getNetworks": [MockFunction],
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction],
              "publishAndDeploy": [MockFunction],
              "read": [MockFunction],
              "registerAsset": [MockFunction],
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction],
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                  },
                ],
              },
            },
            "memory": Object {
              "call": [MockFunction],
              "claim": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              "deleteUserAccount": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                ],
              },
              "getNetworks": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Array [
                      "main",
                    ],
                  },
                ],
              },
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "publishAndDeploy": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {
                      "events": Array [],
                      "functions": Array [
                        Object {
                          "claim": undefined,
                          "completeSend": undefined,
                          "constant": undefined,
                          "name": "deploy",
                          "parameters": Array [],
                          "receive": undefined,
                          "refundAssets": undefined,
                          "returnType": Object {
                            "forwardedValue": undefined,
                            "optional": undefined,
                            "type": "Boolean",
                          },
                          "send": undefined,
                          "sendUnsafe": undefined,
                        },
                      ],
                    },
                    Array [],
                    Object {},
                    Promise {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "read": [MockFunction] {
                "calls": Array [
                  Array [
                    "main",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {},
                  },
                ],
              },
              "registerAsset": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "amount": "100000000",
                      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                      "name": "TheToken",
                      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      "precision": 8,
                      "type": "Token",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "newName",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                ],
              },
            },
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "thrownError": null,
      },
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "operator": MapOperator {
        "project": [Function],
        "thisArg": undefined,
      },
      "source": AnonymousSubject {
        "_isScalar": false,
        "closed": false,
        "destination": BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "local": Object {
              "call": [MockFunction],
              "claim": [MockFunction],
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                },
              },
              "deleteUserAccount": [MockFunction],
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction],
              "getNetworks": [MockFunction],
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction],
              "publishAndDeploy": [MockFunction],
              "read": [MockFunction],
              "registerAsset": [MockFunction],
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction],
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                  },
                ],
              },
            },
            "memory": Object {
              "call": [MockFunction],
              "claim": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              "deleteUserAccount": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                ],
              },
              "getNetworks": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Array [
                      "main",
                    ],
                  },
                ],
              },
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "publishAndDeploy": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {
                      "events": Array [],
                      "functions": Array [
                        Object {
                          "claim": undefined,
                          "completeSend": undefined,
                          "constant": undefined,
                          "name": "deploy",
                          "parameters": Array [],
                          "receive": undefined,
                          "refundAssets": undefined,
                          "returnType": Object {
                            "forwardedValue": undefined,
                            "optional": undefined,
                            "type": "Boolean",
                          },
                          "send": undefined,
                          "sendUnsafe": undefined,
                        },
                      ],
                    },
                    Array [],
                    Object {},
                    Promise {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "read": [MockFunction] {
                "calls": Array [
                  Array [
                    "main",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {},
                  },
                ],
              },
              "registerAsset": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "amount": "100000000",
                      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                      "name": "TheToken",
                      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      "precision": 8,
                      "type": "Token",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "newName",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                ],
              },
            },
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "operator": SwitchMapOperator {
          "project": [Function],
        },
        "source": BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "local": Object {
              "call": [MockFunction],
              "claim": [MockFunction],
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                },
              },
              "deleteUserAccount": [MockFunction],
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction],
              "getNetworks": [MockFunction],
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction],
              "publishAndDeploy": [MockFunction],
              "read": [MockFunction],
              "registerAsset": [MockFunction],
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction],
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "031d8e1630ce640966967bc6d95223d21f44304133003140c3b52004dc981349c9",
                  },
                ],
              },
            },
            "memory": Object {
              "call": [MockFunction],
              "claim": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "currentUserAccount$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Object {
                  "id": Object {
                    "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                    "network": "main",
                  },
                  "name": "Mock",
                  "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                },
              },
              "deleteUserAccount": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "getAccount": [MockFunction],
              "getBlockCount": [MockFunction],
              "getCurrentUserAccount": [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                  Object {
                    "type": "return",
                    "value": Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "Mock",
                      "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                    },
                  },
                ],
              },
              "getNetworks": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Array [
                      "main",
                    ],
                  },
                ],
              },
              "getUserAccounts": [MockFunction],
              "invoke": [MockFunction],
              "invokeClaim": [MockFunction],
              "invokeCompleteSend": [MockFunction],
              "invokeRefundAssets": [MockFunction],
              "invokeSend": [MockFunction],
              "issue": [MockFunction],
              "iterActionsRaw": [MockFunction],
              "iterBlocks": [MockFunction],
              "networks$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  "main",
                ],
              },
              "publish": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "publishAndDeploy": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "author": "dicarlo2",
                      "codeVersion": "1.0",
                      "description": "Hello World",
                      "dynamicInvoke": false,
                      "email": "alex.dicarlo@neotracker.io",
                      "name": "MyContract",
                      "parameters": Array [
                        "Address",
                        "Buffer",
                      ],
                      "payable": true,
                      "returnType": "Buffer",
                      "script": "5f8d70",
                      "storage": true,
                    },
                    Object {
                      "events": Array [],
                      "functions": Array [
                        Object {
                          "claim": undefined,
                          "completeSend": undefined,
                          "constant": undefined,
                          "name": "deploy",
                          "parameters": Array [],
                          "receive": undefined,
                          "refundAssets": undefined,
                          "returnType": Object {
                            "forwardedValue": undefined,
                            "optional": undefined,
                            "type": "Boolean",
                          },
                          "send": undefined,
                          "sendUnsafe": undefined,
                        },
                      ],
                    },
                    Array [],
                    Object {},
                    Promise {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "read": [MockFunction] {
                "calls": Array [
                  Array [
                    "main",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {},
                  },
                ],
              },
              "registerAsset": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "admin": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "amount": "100000000",
                      "issuer": "ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s",
                      "name": "TheToken",
                      "owner": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                      "precision": 8,
                      "type": "Token",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "selectUserAccount": [MockFunction],
              "transfer": [MockFunction],
              "updateUserAccountName": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "id": Object {
                        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                        "network": "main",
                      },
                      "name": "newName",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "userAccounts$": Observable {
                "_isScalar": true,
                "_subscribe": [Function],
                "value": Array [
                  Object {
                    "id": Object {
                      "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
                      "network": "main",
                    },
                    "name": "Mock",
                    "publicKey": "02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef",
                  },
                ],
              },
            },
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "thrownError": null,
      },
      "thrownError": null,
    },
  },
  "convertAction": [Function],
  "decimals": [Function],
  "definition": Object {
    "abi": Object {
      "events": Array [
        Object {
          "name": "transfer",
          "parameters": Array [
            Object {
              "default": undefined,
              "forwardedValue": undefined,
              "name": "from",
              "optional": true,
              "rest": undefined,
              "type": "Address",
            },
            Object {
              "default": undefined,
              "forwardedValue": undefined,
              "name": "to",
              "optional": true,
              "rest": undefined,
              "type": "Address",
            },
            Object {
              "decimals": 8,
              "default": undefined,
              "forwardedValue": undefined,
              "name": "amount",
              "optional": undefined,
              "type": "Integer",
            },
          ],
        },
      ],
      "functions": Array [
        Object {
          "claim": undefined,
          "completeSend": undefined,
          "constant": true,
          "name": "name",
          "parameters": Array [],
          "receive": undefined,
          "refundAssets": undefined,
          "returnType": Object {
            "forwardedValue": undefined,
            "optional": undefined,
            "type": "String",
          },
          "send": undefined,
          "sendUnsafe": undefined,
        },
        Object {
          "claim": undefined,
          "completeSend": undefined,
          "constant": true,
          "name": "symbol",
          "parameters": Array [],
          "receive": undefined,
          "refundAssets": undefined,
          "returnType": Object {
            "forwardedValue": undefined,
            "optional": undefined,
            "type": "String",
          },
          "send": undefined,
          "sendUnsafe": undefined,
        },
        Object {
          "claim": undefined,
          "completeSend": undefined,
          "constant": true,
          "name": "decimals",
          "parameters": Array [],
          "receive": undefined,
          "refundAssets": undefined,
          "returnType": Object {
            "decimals": 0,
            "forwardedValue": undefined,
            "optional": undefined,
            "type": "Integer",
          },
          "send": undefined,
          "sendUnsafe": undefined,
        },
        Object {
          "claim": undefined,
          "completeSend": undefined,
          "constant": true,
          "name": "totalSupply",
          "parameters": Array [],
          "receive": undefined,
          "refundAssets": undefined,
          "returnType": Object {
            "decimals": 8,
            "forwardedValue": undefined,
            "optional": undefined,
            "type": "Integer",
          },
          "send": undefined,
          "sendUnsafe": undefined,
        },
        Object {
          "claim": undefined,
          "completeSend": undefined,
          "constant": undefined,
          "name": "transfer",
          "parameters": Array [
            Object {
              "default": undefined,
              "forwardedValue": undefined,
              "name": "from",
              "optional": undefined,
              "rest": undefined,
              "type": "Address",
            },
            Object {
              "default": undefined,
              "forwardedValue": undefined,
              "name": "to",
              "optional": undefined,
              "rest": undefined,
              "type": "Address",
            },
            Object {
              "decimals": 8,
              "default": undefined,
              "forwardedValue": undefined,
              "name": "value",
              "optional": undefined,
              "type": "Integer",
            },
          ],
          "receive": undefined,
          "refundAssets": undefined,
          "returnType": Object {
            "forwardedValue": undefined,
            "optional": undefined,
            "type": "Boolean",
          },
          "send": undefined,
          "sendUnsafe": undefined,
        },
        Object {
          "claim": undefined,
          "completeSend": undefined,
          "constant": true,
          "name": "balanceOf",
          "parameters": Array [
            Object {
              "default": undefined,
              "forwardedValue": undefined,
              "name": "account",
              "optional": undefined,
              "rest": undefined,
              "type": "Address",
            },
          ],
          "receive": undefined,
          "refundAssets": undefined,
          "returnType": Object {
            "decimals": 8,
            "forwardedValue": undefined,
            "optional": undefined,
            "type": "Integer",
          },
          "send": undefined,
          "sendUnsafe": undefined,
        },
      ],
    },
    "networks": Object {
      "main": Object {
        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
      },
    },
    "sourceMaps": undefined,
  },
  "iterActions": [Function],
  "iterEvents": [Function],
  "iterLogs": [Function],
  "name": [Function],
  "symbol": [Function],
  "totalSupply": [Function],
  "transfer": [Function],
}
`;

exports[`Client transfer - array 1`] = `
Array [
  Array [
    Array [
      Object {
        "amount": "10",
        "asset": "0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b",
        "to": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
      },
    ],
    Object {
      "attributes": Array [],
      "from": Object {
        "address": "AVf4UGKevVrMR1j3UkPsuoYKSC4ocoAkKx",
        "network": "main",
      },
      "monitor": undefined,
      "networkFee": undefined,
      "systemFee": undefined,
    },
  ],
]
`;

exports[`Client transfer - simple 1`] = `
Array [
  Array [
    Array [
      Object {
        "amount": "10",
        "asset": "0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b",
        "to": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
      },
    ],
    Object {},
  ],
]
`;

exports[`Client updateUserAccountName 1`] = `
Array [
  Array [
    Object {
      "id": Object {
        "address": "ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW",
        "network": "main",
      },
      "name": "newName",
    },
  ],
]
`;
