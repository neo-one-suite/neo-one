import { BinaryWriter, common, InvalidFormatError, UInt256 } from '@neo-one/client-common';
import {
  ActionKey,
  BlockDataKey,
  FailedTransactionKey,
  Nep17BalanceKey,
  Nep17TransferKey,
  StorageKey,
  StreamOptions,
  TransactionDataKey,
} from '@neo-one/node-core';
import { BN } from 'bn.js';

// Native contract IDs end at -9 (unless more are added). These negative contract ID numbers
// are used for all storage. So the prefix buffer generated by negative numbers past -12 will
// never be used, so we can use them for our own custom storage needs.
export enum Prefix {
  Nep17Balance = -20,
  Nep17TransferSent = -21,
  Nep17TransferReceived = -22,
  ApplicationLog = -23,
  BlockData = -24,
  TransactionData = -25,
  Action = -26,
  FailedTransaction = -27,
}

const getPrefixKeyFromInt = (int: number) => new BinaryWriter().writeInt32LE(int).toBuffer();

const getCreateKey = <Key>({
  serializeKey,
  prefix,
}: {
  readonly serializeKey: (key: Key) => Buffer;
  readonly prefix: Prefix;
}) => {
  const prefixKey = getPrefixKeyFromInt(prefix);

  return (key: Key) => Buffer.concat([prefixKey, serializeKey(key)]);
};

/* Daniel Byrne: This is a crude method but it does what we want it to do */
/* Spencer: This is terrible and needs to be removed */
const generateSearchRange = (lookupKey: Buffer): Required<StreamOptions> => {
  const asBN = new BN(lookupKey);
  const lte = asBN.addn(1).toBuffer();
  if (lte.length !== lookupKey.length) {
    throw new InvalidFormatError('Error generating storage lookup search range');
  }

  return {
    gte: lookupKey,
    lte,
  };
};

const createGetSearchRange = (prefix: Prefix) => {
  const bufferKey = getPrefixKeyFromInt(prefix);

  return (lookupKey: Buffer, secondaryLookupKey?: Buffer): Required<StreamOptions> => {
    if (secondaryLookupKey) {
      return {
        gte: Buffer.concat([bufferKey, lookupKey]),
        lte: Buffer.concat([bufferKey, secondaryLookupKey]),
      };
    }
    const { gte: initGte, lte: initLte } = generateSearchRange(lookupKey);

    return {
      gte: Buffer.concat([bufferKey, initGte]),
      lte: Buffer.concat([bufferKey, initLte]),
    };
  };
};

// Storage is for anything that is also expected to be read from C# VM code. Basically all contract storage
// including native contracts
const createStorageKey = (key: StorageKey) => key.serializeWire();

const createNep17BalanceKey = getCreateKey<Nep17BalanceKey>({
  serializeKey: (key) => key.serializeWire(),
  prefix: Prefix.Nep17Balance,
});

const createNep17TransferSentKey = getCreateKey<Nep17TransferKey>({
  serializeKey: (key) => key.serializeWire(),
  prefix: Prefix.Nep17TransferSent,
});

const createNep17TransferReceivedKey = getCreateKey<Nep17TransferKey>({
  serializeKey: (key) => key.serializeWire(),
  prefix: Prefix.Nep17TransferReceived,
});

const createBlockDataKey = getCreateKey<BlockDataKey>({
  serializeKey: (key) => key.hash,
  prefix: Prefix.BlockData,
});

const createTransactionDataKey = getCreateKey<TransactionDataKey>({
  serializeKey: (key) => key.hash,
  prefix: Prefix.TransactionData,
});

const serializeActionKey = (key: ActionKey) => key.index.toArrayLike(Buffer, 'be', 8);

const createActionKey = getCreateKey<ActionKey>({
  serializeKey: serializeActionKey,
  prefix: Prefix.Action,
});

const createFailedTransactionKey = getCreateKey<FailedTransactionKey>({
  serializeKey: (key) => key.hash,
  prefix: Prefix.FailedTransaction,
});

const createApplicationLogKey = getCreateKey<UInt256>({
  serializeKey: (key) => common.uInt256ToBuffer(key),
  prefix: Prefix.ApplicationLog,
});

const createGetSearchRangeWithoutPrefix =
  () =>
  (lookupKey: Buffer, secondaryLookupKey?: Buffer): Required<StreamOptions> => {
    if (secondaryLookupKey) {
      return {
        gte: lookupKey,
        lte: secondaryLookupKey,
      };
    }
    const { gte: initGte, lte: initLte } = generateSearchRange(lookupKey);

    return {
      gte: initGte,
      lte: initLte,
    };
  };

const getStorageSearchRange = createGetSearchRangeWithoutPrefix();

const getAllNep17BalanceSearchRange = {
  lte: getPrefixKeyFromInt(Prefix.Nep17Balance),
  gte: getPrefixKeyFromInt(Prefix.Nep17TransferSent),
};

const getNep17BalanceSearchRange = createGetSearchRange(Prefix.Nep17Balance);
const getNep17TransferReceivedSearchRange = createGetSearchRange(Prefix.Nep17TransferReceived);
const getNep17TransferSentSearchRange = createGetSearchRange(Prefix.Nep17TransferSent);

const getAllActionSearchRange = {
  lte: getPrefixKeyFromInt(Prefix.Action),
  gte: getPrefixKeyFromInt(Prefix.FailedTransaction),
};
const getActionSearchRange = createGetSearchRange(Prefix.Action);

const getAllFailedTransactionSearchRange = {
  lte: Buffer.concat([
    getPrefixKeyFromInt(Prefix.FailedTransaction),
    Buffer.alloc(common.UINT256_BUFFER_BYTES, Buffer.from([0xff])),
  ]),
  gte: Buffer.concat([
    getPrefixKeyFromInt(Prefix.FailedTransaction - 1),
    Buffer.alloc(common.UINT256_BUFFER_BYTES, Buffer.from([0x00])),
  ]),
};
const getFailedTransactionSearchRange = createGetSearchRange(Prefix.FailedTransaction);

export const keys = {
  createNep17BalanceKey,
  createNep17TransferSentKey,
  createNep17TransferReceivedKey,
  createApplicationLogKey,
  createStorageKey,
  createBlockDataKey,
  createTransactionDataKey,
  serializeActionKey,
  createActionKey,
  createFailedTransactionKey,
  getStorageSearchRange,
  getNep17BalanceSearchRange,
  getAllNep17BalanceSearchRange,
  getNep17TransferReceivedSearchRange,
  getNep17TransferSentSearchRange,
  getActionSearchRange,
  getAllActionSearchRange,
  getAllFailedTransactionSearchRange,
  getFailedTransactionSearchRange,
};
